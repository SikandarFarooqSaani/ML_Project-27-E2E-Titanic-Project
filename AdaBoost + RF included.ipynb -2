{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"provenance":[]}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport kagglehub\nimport os","metadata":{"id":"cQZAhIZKepXI","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:15.040490Z","iopub.execute_input":"2025-09-04T18:08:15.040775Z","iopub.status.idle":"2025-09-04T18:08:15.862487Z","shell.execute_reply.started":"2025-09-04T18:08:15.040749Z","shell.execute_reply":"2025-09-04T18:08:15.861580Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"df1 = pd.read_csv('/kaggle/input/titanic-5-features-cleanedds/train.csv')","metadata":{"id":"tsn-8ciue3d2","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:15.864341Z","iopub.execute_input":"2025-09-04T18:08:15.864846Z","iopub.status.idle":"2025-09-04T18:08:15.891981Z","shell.execute_reply.started":"2025-09-04T18:08:15.864815Z","shell.execute_reply":"2025-09-04T18:08:15.891167Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"df2 = pd.read_csv('/kaggle/input/titanic-5-features-cleanedds/test.csv')","metadata":{"id":"plh2d9GQfI-i","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:15.893006Z","iopub.execute_input":"2025-09-04T18:08:15.893290Z","iopub.status.idle":"2025-09-04T18:08:15.904880Z","shell.execute_reply.started":"2025-09-04T18:08:15.893262Z","shell.execute_reply":"2025-09-04T18:08:15.903885Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"df = pd.concat([df1,df2])","metadata":{"id":"7TlxDAL5By9e","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:15.905778Z","iopub.execute_input":"2025-09-04T18:08:15.906028Z","iopub.status.idle":"2025-09-04T18:08:15.925626Z","shell.execute_reply.started":"2025-09-04T18:08:15.906009Z","shell.execute_reply":"2025-09-04T18:08:15.924632Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"df.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":258},"id":"9H4tZxdIfIsc","outputId":"6f9b69aa-515f-4582-dacc-1d62d60f51ed","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:15.926608Z","iopub.execute_input":"2025-09-04T18:08:15.926975Z","iopub.status.idle":"2025-09-04T18:08:15.964814Z","shell.execute_reply.started":"2025-09-04T18:08:15.926947Z","shell.execute_reply":"2025-09-04T18:08:15.963969Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1       0.0       3   \n1            2       1.0       1   \n2            3       1.0       3   \n3            4       1.0       1   \n4            5       0.0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"df.columns","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-cAPkElHCJAb","outputId":"4939c38f-6f5f-436f-c594-afabbe0c2267","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:15.965671Z","iopub.execute_input":"2025-09-04T18:08:15.965894Z","iopub.status.idle":"2025-09-04T18:08:15.972099Z","shell.execute_reply.started":"2025-09-04T18:08:15.965875Z","shell.execute_reply":"2025-09-04T18:08:15.971249Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n      dtype='object')"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"df.drop(['PassengerId','Name','SibSp','Parch','Ticket','Cabin'],axis=1,inplace=True)","metadata":{"id":"JnJSDuV9fQeE","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:15.975039Z","iopub.execute_input":"2025-09-04T18:08:15.975488Z","iopub.status.idle":"2025-09-04T18:08:15.993026Z","shell.execute_reply.started":"2025-09-04T18:08:15.975451Z","shell.execute_reply":"2025-09-04T18:08:15.991997Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"-rTCCk6Ofg6X","outputId":"a70b1b65-71fd-48d9-b014-5899597ee370","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:15.994026Z","iopub.execute_input":"2025-09-04T18:08:15.994319Z","iopub.status.idle":"2025-09-04T18:08:16.015094Z","shell.execute_reply.started":"2025-09-04T18:08:15.994286Z","shell.execute_reply":"2025-09-04T18:08:16.014270Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"Survived    418\nPclass        0\nSex           0\nAge         263\nFare          1\nEmbarked      2\ndtype: int64"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"df['Survived'].fillna(df['Survived'].mean(),inplace=True)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FTQKKjXlC-7M","outputId":"2e2160a8-8867-4dbe-8353-b85a8a63b180","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.016498Z","iopub.execute_input":"2025-09-04T18:08:16.016811Z","iopub.status.idle":"2025-09-04T18:08:16.036304Z","shell.execute_reply.started":"2025-09-04T18:08:16.016782Z","shell.execute_reply":"2025-09-04T18:08:16.035347Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/2983833627.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['Survived'].fillna(df['Survived'].mean(),inplace=True)\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"df['Embarked'].fillna('S',inplace=True)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3kIGgDfWfqhj","outputId":"afbc1e50-7da1-4650-9be1-224fe8154146","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.037212Z","iopub.execute_input":"2025-09-04T18:08:16.037509Z","iopub.status.idle":"2025-09-04T18:08:16.052529Z","shell.execute_reply.started":"2025-09-04T18:08:16.037489Z","shell.execute_reply":"2025-09-04T18:08:16.051508Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/3895404187.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['Embarked'].fillna('S',inplace=True)\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"df['Age'].fillna(df['Age'].mean(),inplace=True)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UftHs154m799","outputId":"a95b4f22-0ba1-4f93-9257-062616e5a8ce","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.053414Z","iopub.execute_input":"2025-09-04T18:08:16.053709Z","iopub.status.idle":"2025-09-04T18:08:16.069389Z","shell.execute_reply.started":"2025-09-04T18:08:16.053683Z","shell.execute_reply":"2025-09-04T18:08:16.068213Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/694922604.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['Age'].fillna(df['Age'].mean(),inplace=True)\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"df['Fare'].fillna(df['Fare'].mean(),inplace=True)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MtnY_wEuDKRW","outputId":"522498bd-3a09-4873-d326-be161b99b12c","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.071002Z","iopub.execute_input":"2025-09-04T18:08:16.071379Z","iopub.status.idle":"2025-09-04T18:08:16.087375Z","shell.execute_reply.started":"2025-09-04T18:08:16.071322Z","shell.execute_reply":"2025-09-04T18:08:16.086358Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/1005235208.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['Fare'].fillna(df['Fare'].mean(),inplace=True)\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"df.dtypes","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"3xe8M0txf4Av","outputId":"6823f58d-36e3-4833-b72b-15789d81a7a9","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.088259Z","iopub.execute_input":"2025-09-04T18:08:16.088509Z","iopub.status.idle":"2025-09-04T18:08:16.107683Z","shell.execute_reply.started":"2025-09-04T18:08:16.088486Z","shell.execute_reply":"2025-09-04T18:08:16.106805Z"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"Survived    float64\nPclass        int64\nSex          object\nAge         float64\nFare        float64\nEmbarked     object\ndtype: object"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])","metadata":{"id":"TaYdbxPLgDvo","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.108812Z","iopub.execute_input":"2025-09-04T18:08:16.109146Z","iopub.status.idle":"2025-09-04T18:08:16.675463Z","shell.execute_reply.started":"2025-09-04T18:08:16.109116Z","shell.execute_reply":"2025-09-04T18:08:16.674541Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"df['Embarked'] = le.fit_transform(df['Embarked'])","metadata":{"id":"O-0THSP-g8dF","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.676317Z","iopub.execute_input":"2025-09-04T18:08:16.676685Z","iopub.status.idle":"2025-09-04T18:08:16.682309Z","shell.execute_reply.started":"2025-09-04T18:08:16.676666Z","shell.execute_reply":"2025-09-04T18:08:16.681294Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"df.dtypes","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"-0YMTVwBDWCW","outputId":"c4170c89-aac6-4330-dee2-0ad16dc8f21f","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.683221Z","iopub.execute_input":"2025-09-04T18:08:16.683545Z","iopub.status.idle":"2025-09-04T18:08:16.702044Z","shell.execute_reply.started":"2025-09-04T18:08:16.683519Z","shell.execute_reply":"2025-09-04T18:08:16.701196Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"Survived    float64\nPclass        int64\nSex           int64\nAge         float64\nFare        float64\nEmbarked      int64\ndtype: object"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"df['Survived'] = df['Survived'].astype(int)","metadata":{"id":"tkB4hLYWhGWW","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.703033Z","iopub.execute_input":"2025-09-04T18:08:16.703389Z","iopub.status.idle":"2025-09-04T18:08:16.718350Z","shell.execute_reply.started":"2025-09-04T18:08:16.703357Z","shell.execute_reply":"2025-09-04T18:08:16.717484Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"df","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"VGTs_xuMD6S1","outputId":"86d90bf3-fbf0-4c80-abc1-1403c85c067f","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.719096Z","iopub.execute_input":"2025-09-04T18:08:16.719372Z","iopub.status.idle":"2025-09-04T18:08:16.745201Z","shell.execute_reply.started":"2025-09-04T18:08:16.719353Z","shell.execute_reply":"2025-09-04T18:08:16.744284Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"     Survived  Pclass  Sex        Age      Fare  Embarked\n0           0       3    1  22.000000    7.2500         2\n1           1       1    0  38.000000   71.2833         0\n2           1       3    0  26.000000    7.9250         2\n3           1       1    0  35.000000   53.1000         2\n4           0       3    1  35.000000    8.0500         2\n..        ...     ...  ...        ...       ...       ...\n413         0       3    1  29.881138    8.0500         2\n414         0       1    0  39.000000  108.9000         0\n415         0       3    1  38.500000    7.2500         2\n416         0       3    1  29.881138    8.0500         2\n417         0       3    1  29.881138   22.3583         0\n\n[1309 rows x 6 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.000000</td>\n      <td>7.2500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.000000</td>\n      <td>71.2833</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.000000</td>\n      <td>7.9250</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.000000</td>\n      <td>53.1000</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.000000</td>\n      <td>8.0500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>29.881138</td>\n      <td>8.0500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>39.000000</td>\n      <td>108.9000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>38.500000</td>\n      <td>7.2500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>29.881138</td>\n      <td>8.0500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>29.881138</td>\n      <td>22.3583</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1309 rows × 6 columns</p>\n</div>"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX = df.drop('Survived',axis=1)\ny = df['Survived']","metadata":{"id":"4AVPiEjKhG5r","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.746092Z","iopub.execute_input":"2025-09-04T18:08:16.746389Z","iopub.status.idle":"2025-09-04T18:08:16.874154Z","shell.execute_reply.started":"2025-09-04T18:08:16.746368Z","shell.execute_reply":"2025-09-04T18:08:16.873255Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)","metadata":{"id":"WRrop85wiy6U","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.875426Z","iopub.execute_input":"2025-09-04T18:08:16.875913Z","iopub.status.idle":"2025-09-04T18:08:16.884668Z","shell.execute_reply.started":"2025-09-04T18:08:16.875882Z","shell.execute_reply":"2025-09-04T18:08:16.883740Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"df.to_csv(\"Titanic\",index=False)","metadata":{"id":"zkCWZCUWhLpn","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.885656Z","iopub.execute_input":"2025-09-04T18:08:16.885943Z","iopub.status.idle":"2025-09-04T18:08:16.917986Z","shell.execute_reply.started":"2025-09-04T18:08:16.885914Z","shell.execute_reply":"2025-09-04T18:08:16.916947Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\nfrom scipy import stats\nimport seaborn as sns\nimport matplotlib.pyplot as plt","metadata":{"id":"xFLpwzLhhvkC","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:16.926787Z","iopub.execute_input":"2025-09-04T18:08:16.927209Z","iopub.status.idle":"2025-09-04T18:08:17.677945Z","shell.execute_reply.started":"2025-09-04T18:08:16.927178Z","shell.execute_reply":"2025-09-04T18:08:17.676961Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"lg = LogisticRegression()\ndt = DecisionTreeClassifier()\nknn = KNeighborsClassifier()","metadata":{"id":"zmvZzM8RioJ7","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:17.678844Z","iopub.execute_input":"2025-09-04T18:08:17.679385Z","iopub.status.idle":"2025-09-04T18:08:17.684411Z","shell.execute_reply.started":"2025-09-04T18:08:17.679357Z","shell.execute_reply":"2025-09-04T18:08:17.683567Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"lg.fit(x_train,y_train)\ndt.fit(x_train,y_train)\nknn.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"HIub6Hr1iqu7","outputId":"06b5fa09-c839-4fae-c9c0-5a4b309cd1ea","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:17.685410Z","iopub.execute_input":"2025-09-04T18:08:17.685712Z","iopub.status.idle":"2025-09-04T18:08:18.203856Z","shell.execute_reply.started":"2025-09-04T18:08:17.685688Z","shell.execute_reply":"2025-09-04T18:08:18.202782Z"}},"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"KNeighborsClassifier()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"print(\"Accuracy of Logistic Regression\", accuracy_score(y_test,lg.predict(x_test)))\nprint(\"Accuracy of Decision Tree \", accuracy_score(y_test,dt.predict(x_test)))\nprint(\"Accuracy of Knn is \" , accuracy_score(y_test,knn.predict(x_test)))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8co6mjBwi2mh","outputId":"e70ae388-331a-4298-c641-bc1043c65675","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:18.204481Z","iopub.execute_input":"2025-09-04T18:08:18.204727Z","iopub.status.idle":"2025-09-04T18:08:18.240342Z","shell.execute_reply.started":"2025-09-04T18:08:18.204707Z","shell.execute_reply":"2025-09-04T18:08:18.239039Z"}},"outputs":[{"name":"stdout","text":"Accuracy of Logistic Regression 0.7633587786259542\nAccuracy of Decision Tree  0.7137404580152672\nAccuracy of Knn is  0.7099236641221374\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"cm1 = confusion_matrix(y_test,lg.predict(x_test))\ncm2 = confusion_matrix(y_test,dt.predict(x_test))\ncm3 = confusion_matrix(y_test,knn.predict(x_test))","metadata":{"id":"xWZ7MiBXj0EJ","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:18.241408Z","iopub.execute_input":"2025-09-04T18:08:18.241672Z","iopub.status.idle":"2025-09-04T18:08:18.300516Z","shell.execute_reply.started":"2025-09-04T18:08:18.241651Z","shell.execute_reply":"2025-09-04T18:08:18.299621Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm1, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Logistic Regression')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"kkmNtAkRjmU-","outputId":"183b7af5-e369-4a3e-a0d8-dcf3bf00e764","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:18.301812Z","iopub.execute_input":"2025-09-04T18:08:18.302037Z","iopub.status.idle":"2025-09-04T18:08:18.604800Z","shell.execute_reply.started":"2025-09-04T18:08:18.302019Z","shell.execute_reply":"2025-09-04T18:08:18.603805Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":27},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(cm2, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Decision Tree')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"v6IBpNy_kBUs","outputId":"dda3872d-4325-45c8-9080-b0e574649cba","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:18.605752Z","iopub.execute_input":"2025-09-04T18:08:18.606077Z","iopub.status.idle":"2025-09-04T18:08:18.803047Z","shell.execute_reply.started":"2025-09-04T18:08:18.606050Z","shell.execute_reply":"2025-09-04T18:08:18.802087Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(cm3, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix KNN')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"ASUXFRq2kOYH","outputId":"9c95caa1-911d-4c33-faef-aa49f7c950d4","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:18.804085Z","iopub.execute_input":"2025-09-04T18:08:18.804501Z","iopub.status.idle":"2025-09-04T18:08:19.019769Z","shell.execute_reply.started":"2025-09-04T18:08:18.804474Z","shell.execute_reply":"2025-09-04T18:08:19.018825Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":29},{"cell_type":"markdown","source":"Lets find best parameters for this on all","metadata":{"id":"-aVdPajujO_h"}},{"cell_type":"code","source":"param_dist = {\n    'penalty': ['l1', 'l2', 'elasticnet'],\n    'C': stats.loguniform(1e-3, 1e2),\n    'solver': ['liblinear', 'saga'],   # removed 'newton-cg' (not compatible with l1/elasticnet)\n    'max_iter': [100, 200, 500],       # cleaner values, avoid very small like 10 or 50\n    'class_weight': ['balanced', None],\n    'l1_ratio': [0.1, 0.5, 0.9]        # only works when penalty='elasticnet' and solver='saga'\n}\n\nreg = RandomizedSearchCV(\n    LogisticRegression(),\n    param_distributions=param_dist,\n    n_iter=30,   # number of random samples\n    cv=5,\n    n_jobs=-1,\n    verbose=1,\n    random_state=42,\n    scoring='accuracy'\n)\n\n","metadata":{"id":"pfJvO67ei6_H","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:19.020558Z","iopub.execute_input":"2025-09-04T18:08:19.020796Z","iopub.status.idle":"2025-09-04T18:08:19.027477Z","shell.execute_reply.started":"2025-09-04T18:08:19.020778Z","shell.execute_reply":"2025-09-04T18:08:19.026511Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"reg.fit(x_train, y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":745},"id":"-9MuikrKk1S4","outputId":"0f60d318-b984-43fb-cd43-22be6be88579","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:19.028724Z","iopub.execute_input":"2025-09-04T18:08:19.029101Z","iopub.status.idle":"2025-09-04T18:08:22.550963Z","shell.execute_reply.started":"2025-09-04T18:08:19.029070Z","shell.execute_reply":"2025-09-04T18:08:22.550083Z"}},"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 30 candidates, totalling 150 fits\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n20 fits failed out of a total of 150.\nThe score on these train-test partitions for these parameters will be set to nan.\nIf these failures are not expected, you can try to debug them by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n20 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 1162, in fit\n    solver = _check_solver(self.solver, self.penalty, self.dual)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 64, in _check_solver\n    raise ValueError(\nValueError: Only 'saga' solver supports elasticnet penalty, got solver=liblinear.\n\n  warnings.warn(some_fits_failed_message, FitFailedWarning)\n/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [0.72970608 0.6991342  0.7383003  0.78415129 0.7516792  0.78127592\n        nan 0.7134746  0.73925723 0.73829574 0.7383003  0.7383003\n 0.78319435 0.73830485        nan 0.73065391 0.6991342  0.70298473\n 0.72779221 0.78032809 0.6991342         nan 0.72397813        nan\n 0.74021417 0.78128503 0.70200957 0.72873548 0.72110276 0.72493051]\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n","output_type":"stream"},{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"RandomizedSearchCV(cv=5, estimator=LogisticRegression(), n_iter=30, n_jobs=-1,\n                   param_distributions={'C': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x7aef46d286d0>,\n                                        'class_weight': ['balanced', None],\n                                        'l1_ratio': [0.1, 0.5, 0.9],\n                                        'max_iter': [100, 200, 500],\n                                        'penalty': ['l1', 'l2', 'elasticnet'],\n                                        'solver': ['liblinear', 'saga']},\n                   random_state=42, scoring='accuracy', verbose=1)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, estimator=LogisticRegression(), n_iter=30, n_jobs=-1,\n                   param_distributions={&#x27;C&#x27;: &lt;scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x7aef46d286d0&gt;,\n                                        &#x27;class_weight&#x27;: [&#x27;balanced&#x27;, None],\n                                        &#x27;l1_ratio&#x27;: [0.1, 0.5, 0.9],\n                                        &#x27;max_iter&#x27;: [100, 200, 500],\n                                        &#x27;penalty&#x27;: [&#x27;l1&#x27;, &#x27;l2&#x27;, &#x27;elasticnet&#x27;],\n                                        &#x27;solver&#x27;: [&#x27;liblinear&#x27;, &#x27;saga&#x27;]},\n                   random_state=42, scoring=&#x27;accuracy&#x27;, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5, estimator=LogisticRegression(), n_iter=30, n_jobs=-1,\n                   param_distributions={&#x27;C&#x27;: &lt;scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x7aef46d286d0&gt;,\n                                        &#x27;class_weight&#x27;: [&#x27;balanced&#x27;, None],\n                                        &#x27;l1_ratio&#x27;: [0.1, 0.5, 0.9],\n                                        &#x27;max_iter&#x27;: [100, 200, 500],\n                                        &#x27;penalty&#x27;: [&#x27;l1&#x27;, &#x27;l2&#x27;, &#x27;elasticnet&#x27;],\n                                        &#x27;solver&#x27;: [&#x27;liblinear&#x27;, &#x27;saga&#x27;]},\n                   random_state=42, scoring=&#x27;accuracy&#x27;, verbose=1)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":31},{"cell_type":"code","source":"reg.best_score_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QpuFi2YrkagY","outputId":"319e4e7a-2bbe-4290-e35b-d014df0ad4b3","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:22.551868Z","iopub.execute_input":"2025-09-04T18:08:22.552170Z","iopub.status.idle":"2025-09-04T18:08:22.557957Z","shell.execute_reply.started":"2025-09-04T18:08:22.552144Z","shell.execute_reply":"2025-09-04T18:08:22.557094Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"0.784151287309182"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"reg.best_params_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EnsC458Qkf0A","outputId":"d8cee173-0e65-44e4-921e-e8ac88d4e3d6","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:22.558840Z","iopub.execute_input":"2025-09-04T18:08:22.559489Z","iopub.status.idle":"2025-09-04T18:08:22.578050Z","shell.execute_reply.started":"2025-09-04T18:08:22.559468Z","shell.execute_reply":"2025-09-04T18:08:22.577158Z"}},"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"{'C': 4.073745196058386,\n 'class_weight': None,\n 'l1_ratio': 0.5,\n 'max_iter': 200,\n 'penalty': 'l1',\n 'solver': 'liblinear'}"},"metadata":{}}],"execution_count":33},{"cell_type":"code","source":"param_grid2 = {\n    'criterion': ['gini', 'entropy'],\n    'splitter': ['best', 'random'],\n    'max_depth': [2, 4, 8, 10, 13],\n    'max_features': ['sqrt', 'log2', None],\n    'min_samples_leaf': [2, 4, 5],   # added smaller option for flexibility\n    'min_samples_split': [2, 5, 10], # new param, controls internal node splits\n    'class_weight': [None, 'balanced']\n}\nrcv = RandomizedSearchCV(\n    DecisionTreeClassifier(),\n    param_distributions=param_grid2,\n    n_iter=10,\n    cv=5,\n    random_state=4,\n    n_jobs=-1,      # parallel processing\n    verbose=1       # optional, shows progress\n)","metadata":{"id":"Amu2nZE8lmpb","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:22.578958Z","iopub.execute_input":"2025-09-04T18:08:22.579203Z","iopub.status.idle":"2025-09-04T18:08:22.594544Z","shell.execute_reply.started":"2025-09-04T18:08:22.579184Z","shell.execute_reply":"2025-09-04T18:08:22.593639Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"rcv.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":182},"id":"uwtM_5OLmCkH","outputId":"884d6c04-1894-4caa-e9b4-2fe46f7aa62d","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:22.595677Z","iopub.execute_input":"2025-09-04T18:08:22.596016Z","iopub.status.idle":"2025-09-04T18:08:22.776421Z","shell.execute_reply.started":"2025-09-04T18:08:22.595983Z","shell.execute_reply":"2025-09-04T18:08:22.775540Z"}},"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","output_type":"stream"},{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"RandomizedSearchCV(cv=5, estimator=DecisionTreeClassifier(), n_jobs=-1,\n                   param_distributions={'class_weight': [None, 'balanced'],\n                                        'criterion': ['gini', 'entropy'],\n                                        'max_depth': [2, 4, 8, 10, 13],\n                                        'max_features': ['sqrt', 'log2', None],\n                                        'min_samples_leaf': [2, 4, 5],\n                                        'min_samples_split': [2, 5, 10],\n                                        'splitter': ['best', 'random']},\n                   random_state=4, verbose=1)","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, estimator=DecisionTreeClassifier(), n_jobs=-1,\n                   param_distributions={&#x27;class_weight&#x27;: [None, &#x27;balanced&#x27;],\n                                        &#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n                                        &#x27;max_depth&#x27;: [2, 4, 8, 10, 13],\n                                        &#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;, None],\n                                        &#x27;min_samples_leaf&#x27;: [2, 4, 5],\n                                        &#x27;min_samples_split&#x27;: [2, 5, 10],\n                                        &#x27;splitter&#x27;: [&#x27;best&#x27;, &#x27;random&#x27;]},\n                   random_state=4, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5, estimator=DecisionTreeClassifier(), n_jobs=-1,\n                   param_distributions={&#x27;class_weight&#x27;: [None, &#x27;balanced&#x27;],\n                                        &#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n                                        &#x27;max_depth&#x27;: [2, 4, 8, 10, 13],\n                                        &#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;, None],\n                                        &#x27;min_samples_leaf&#x27;: [2, 4, 5],\n                                        &#x27;min_samples_split&#x27;: [2, 5, 10],\n                                        &#x27;splitter&#x27;: [&#x27;best&#x27;, &#x27;random&#x27;]},\n                   random_state=4, verbose=1)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"rcv.best_score_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C5BUH4gHmEOp","outputId":"8b1a58a6-5e90-43af-c933-4786288fc538","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:22.777017Z","iopub.execute_input":"2025-09-04T18:08:22.777222Z","iopub.status.idle":"2025-09-04T18:08:22.782856Z","shell.execute_reply.started":"2025-09-04T18:08:22.777207Z","shell.execute_reply":"2025-09-04T18:08:22.782023Z"}},"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"0.7841649578491683"},"metadata":{}}],"execution_count":36},{"cell_type":"code","source":"rcv.best_params_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AFOkjadanLr7","outputId":"42a0992e-b78d-426a-9f69-a7462ff44467","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:22.783661Z","iopub.execute_input":"2025-09-04T18:08:22.783908Z","iopub.status.idle":"2025-09-04T18:08:22.800112Z","shell.execute_reply.started":"2025-09-04T18:08:22.783885Z","shell.execute_reply":"2025-09-04T18:08:22.799070Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"{'splitter': 'random',\n 'min_samples_split': 2,\n 'min_samples_leaf': 4,\n 'max_features': 'sqrt',\n 'max_depth': 10,\n 'criterion': 'entropy',\n 'class_weight': None}"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"param_dist3 = {\n    'n_neighbors': np.arange(1, 17),       # try neighbors from 1 to 30\n    'weights': ['uniform', 'distance'],    # equal or weighted by distance\n    'metric': ['euclidean', 'manhattan', 'minkowski'],\n    'p': [1, 2,3]                            # 1=manhattan, 2=euclidean\n}\n\n# RandomizedSearchCV setup\nrcv2 = RandomizedSearchCV(\n    KNeighborsClassifier(),\n    param_distributions=param_dist3,\n    n_iter=20,          # number of random samples to test\n    cv=5,               # 5-fold cross validation\n    random_state=42,\n    n_jobs=-1,\n    verbose=1,\n    scoring='accuracy'  # or 'f1' if imbalanced\n)\n","metadata":{"id":"BZZhesapnND6","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:22.801061Z","iopub.execute_input":"2025-09-04T18:08:22.801346Z","iopub.status.idle":"2025-09-04T18:08:22.819739Z","shell.execute_reply.started":"2025-09-04T18:08:22.801327Z","shell.execute_reply":"2025-09-04T18:08:22.818706Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"rcv2.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":182},"id":"PB2RJxs1nku2","outputId":"add7ba7a-d84c-4dcd-f763-47a4f63408a7","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:22.820660Z","iopub.execute_input":"2025-09-04T18:08:22.820894Z","iopub.status.idle":"2025-09-04T18:08:23.435142Z","shell.execute_reply.started":"2025-09-04T18:08:22.820877Z","shell.execute_reply":"2025-09-04T18:08:23.434441Z"}},"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 20 candidates, totalling 100 fits\n","output_type":"stream"},{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"RandomizedSearchCV(cv=5, estimator=KNeighborsClassifier(), n_iter=20, n_jobs=-1,\n                   param_distributions={'metric': ['euclidean', 'manhattan',\n                                                   'minkowski'],\n                                        'n_neighbors': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16]),\n                                        'p': [1, 2, 3],\n                                        'weights': ['uniform', 'distance']},\n                   random_state=42, scoring='accuracy', verbose=1)","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, estimator=KNeighborsClassifier(), n_iter=20, n_jobs=-1,\n                   param_distributions={&#x27;metric&#x27;: [&#x27;euclidean&#x27;, &#x27;manhattan&#x27;,\n                                                   &#x27;minkowski&#x27;],\n                                        &#x27;n_neighbors&#x27;: array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16]),\n                                        &#x27;p&#x27;: [1, 2, 3],\n                                        &#x27;weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]},\n                   random_state=42, scoring=&#x27;accuracy&#x27;, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5, estimator=KNeighborsClassifier(), n_iter=20, n_jobs=-1,\n                   param_distributions={&#x27;metric&#x27;: [&#x27;euclidean&#x27;, &#x27;manhattan&#x27;,\n                                                   &#x27;minkowski&#x27;],\n                                        &#x27;n_neighbors&#x27;: array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16]),\n                                        &#x27;p&#x27;: [1, 2, 3],\n                                        &#x27;weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]},\n                   random_state=42, scoring=&#x27;accuracy&#x27;, verbose=1)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"rcv2.best_score_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UXpOCmoTnmtI","outputId":"38777e38-a0fa-441d-9400-eb2277288f9f","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:23.436012Z","iopub.execute_input":"2025-09-04T18:08:23.436278Z","iopub.status.idle":"2025-09-04T18:08:23.441725Z","shell.execute_reply.started":"2025-09-04T18:08:23.436250Z","shell.execute_reply":"2025-09-04T18:08:23.440864Z"}},"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"0.7421052631578947"},"metadata":{}}],"execution_count":40},{"cell_type":"code","source":"rcv2.best_params_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FerysV7MnpBI","outputId":"94673592-eb33-4119-90c2-813f0911206c","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:23.442520Z","iopub.execute_input":"2025-09-04T18:08:23.442766Z","iopub.status.idle":"2025-09-04T18:08:23.458337Z","shell.execute_reply.started":"2025-09-04T18:08:23.442736Z","shell.execute_reply":"2025-09-04T18:08:23.457475Z"}},"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"{'weights': 'uniform', 'p': 2, 'n_neighbors': 4, 'metric': 'manhattan'}"},"metadata":{}}],"execution_count":41},{"cell_type":"markdown","source":"<h1> Now we have got best parameters for all . Need is now to use voting and Bagging classifier to get best results </h1>","metadata":{"id":"KjBBpT3WntpU"}},{"cell_type":"code","source":"lrr = LogisticRegression(C=4.073745196058386,\n    class_weight=None,\n    max_iter=200,\n    penalty='l1',\n    solver='liblinear')\n\ndtt = DecisionTreeClassifier(splitter='random',\n    min_samples_split=2,\n    min_samples_leaf=2,\n    max_features=None,\n    max_depth=4,\n    criterion='entropy',\n    class_weight=None,\n    random_state=42)\n\nknnn = KNeighborsClassifier(\n    weights='uniform',\n    p=2,\n    n_neighbors=5,\n    metric='manhattan'\n)","metadata":{"id":"cXGkzwiAnq-B","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:23.459137Z","iopub.execute_input":"2025-09-04T18:08:23.459388Z","iopub.status.idle":"2025-09-04T18:08:23.474139Z","shell.execute_reply.started":"2025-09-04T18:08:23.459369Z","shell.execute_reply":"2025-09-04T18:08:23.473214Z"}},"outputs":[],"execution_count":42},{"cell_type":"code","source":"estimators = [('lr',lrr),('dt',dtt),('knn',knnn)]","metadata":{"id":"koATtBFiouk3","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:23.475100Z","iopub.execute_input":"2025-09-04T18:08:23.475882Z","iopub.status.idle":"2025-09-04T18:08:23.490446Z","shell.execute_reply.started":"2025-09-04T18:08:23.475853Z","shell.execute_reply":"2025-09-04T18:08:23.489703Z"}},"outputs":[],"execution_count":43},{"cell_type":"code","source":"from sklearn.ensemble import VotingClassifier\nfrom sklearn.model_selection import cross_val_score","metadata":{"id":"svd6FkHTo3ES","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:23.491340Z","iopub.execute_input":"2025-09-04T18:08:23.491962Z","iopub.status.idle":"2025-09-04T18:08:23.506295Z","shell.execute_reply.started":"2025-09-04T18:08:23.491920Z","shell.execute_reply":"2025-09-04T18:08:23.505283Z"}},"outputs":[],"execution_count":44},{"cell_type":"code","source":"vr = VotingClassifier(estimators)\nscores = cross_val_score(vr,X,y,scoring='accuracy',cv=10)\nprint(\"Voting Regressor\",np.round(np.mean(scores),2))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"owYYhRB5ozxt","outputId":"8934c63c-c538-4731-88e5-c055545284a7","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:23.507517Z","iopub.execute_input":"2025-09-04T18:08:23.507821Z","iopub.status.idle":"2025-09-04T18:08:23.825178Z","shell.execute_reply.started":"2025-09-04T18:08:23.507793Z","shell.execute_reply":"2025-09-04T18:08:23.824433Z"}},"outputs":[{"name":"stdout","text":"Voting Regressor 0.78\n","output_type":"stream"}],"execution_count":45},{"cell_type":"code","source":"vr.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":134},"id":"bwgDA9-3pZnW","outputId":"1d38f29f-841b-46b9-c237-df4b338d4664","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:23.826018Z","iopub.execute_input":"2025-09-04T18:08:23.826277Z","iopub.status.idle":"2025-09-04T18:08:23.856774Z","shell.execute_reply.started":"2025-09-04T18:08:23.826248Z","shell.execute_reply":"2025-09-04T18:08:23.855898Z"}},"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"VotingClassifier(estimators=[('lr',\n                              LogisticRegression(C=4.073745196058386,\n                                                 max_iter=200, penalty='l1',\n                                                 solver='liblinear')),\n                             ('dt',\n                              DecisionTreeClassifier(criterion='entropy',\n                                                     max_depth=4,\n                                                     min_samples_leaf=2,\n                                                     random_state=42,\n                                                     splitter='random')),\n                             ('knn', KNeighborsClassifier(metric='manhattan'))])","text/html":"<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>VotingClassifier(estimators=[(&#x27;lr&#x27;,\n                              LogisticRegression(C=4.073745196058386,\n                                                 max_iter=200, penalty=&#x27;l1&#x27;,\n                                                 solver=&#x27;liblinear&#x27;)),\n                             (&#x27;dt&#x27;,\n                              DecisionTreeClassifier(criterion=&#x27;entropy&#x27;,\n                                                     max_depth=4,\n                                                     min_samples_leaf=2,\n                                                     random_state=42,\n                                                     splitter=&#x27;random&#x27;)),\n                             (&#x27;knn&#x27;, KNeighborsClassifier(metric=&#x27;manhattan&#x27;))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">VotingClassifier</label><div class=\"sk-toggleable__content\"><pre>VotingClassifier(estimators=[(&#x27;lr&#x27;,\n                              LogisticRegression(C=4.073745196058386,\n                                                 max_iter=200, penalty=&#x27;l1&#x27;,\n                                                 solver=&#x27;liblinear&#x27;)),\n                             (&#x27;dt&#x27;,\n                              DecisionTreeClassifier(criterion=&#x27;entropy&#x27;,\n                                                     max_depth=4,\n                                                     min_samples_leaf=2,\n                                                     random_state=42,\n                                                     splitter=&#x27;random&#x27;)),\n                             (&#x27;knn&#x27;, KNeighborsClassifier(metric=&#x27;manhattan&#x27;))])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>lr</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(C=4.073745196058386, max_iter=200, penalty=&#x27;l1&#x27;,\n                   solver=&#x27;liblinear&#x27;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>dt</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=4, min_samples_leaf=2,\n                       random_state=42, splitter=&#x27;random&#x27;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>knn</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(metric=&#x27;manhattan&#x27;)</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":46},{"cell_type":"code","source":"rmm = confusion_matrix(y_test,vr.predict(x_test))","metadata":{"id":"BukOh_VUpMyv","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:23.857803Z","iopub.execute_input":"2025-09-04T18:08:23.858281Z","iopub.status.idle":"2025-09-04T18:08:23.886061Z","shell.execute_reply.started":"2025-09-04T18:08:23.858252Z","shell.execute_reply":"2025-09-04T18:08:23.885027Z"}},"outputs":[],"execution_count":47},{"cell_type":"code","source":"accuracy_score(y_test,vr.predict(x_test)) #highest so far","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vVyz76t0pn5-","outputId":"45b2d135-3a82-40f0-9193-b95c6a997687","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:23.887094Z","iopub.execute_input":"2025-09-04T18:08:23.887376Z","iopub.status.idle":"2025-09-04T18:08:23.915482Z","shell.execute_reply.started":"2025-09-04T18:08:23.887354Z","shell.execute_reply":"2025-09-04T18:08:23.914562Z"}},"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"0.7748091603053435"},"metadata":{}}],"execution_count":48},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(rmm, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Voting Classifier')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"JDl1aK0bpYAJ","outputId":"27d922d0-2f18-45cb-87b3-8af4cb9dc9c6","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:23.916472Z","iopub.execute_input":"2025-09-04T18:08:23.916793Z","iopub.status.idle":"2025-09-04T18:08:24.123045Z","shell.execute_reply.started":"2025-09-04T18:08:23.916767Z","shell.execute_reply":"2025-09-04T18:08:24.121903Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":49},{"cell_type":"markdown","source":"<h1> Lets try Bagging </h1>","metadata":{"id":"g4tXdaYYqCH5"}},{"cell_type":"markdown","source":"","metadata":{"id":"1-vtMALvqCDd"}},{"cell_type":"code","source":"x_train.shape","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DDZe73DWqgdx","outputId":"b2abf64b-4d51-4dc7-f91d-823c4f0c9b96","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:24.123969Z","iopub.execute_input":"2025-09-04T18:08:24.124291Z","iopub.status.idle":"2025-09-04T18:08:24.130255Z","shell.execute_reply.started":"2025-09-04T18:08:24.124266Z","shell.execute_reply":"2025-09-04T18:08:24.129549Z"}},"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"(1047, 5)"},"metadata":{}}],"execution_count":50},{"cell_type":"code","source":"bag = BaggingClassifier(\n  estimator=DecisionTreeClassifier(),\n    n_estimators=700,\n    max_samples=0.25, #row sampling\n    bootstrap=True, #pasting vs bagging\n    #max_features=0.5, #column sampling\n    bootstrap_features=False,\n    random_state=42,\n    n_jobs=-1\n)","metadata":{"id":"ledEhL5BpkbE","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:24.131135Z","iopub.execute_input":"2025-09-04T18:08:24.131539Z","iopub.status.idle":"2025-09-04T18:08:24.148677Z","shell.execute_reply.started":"2025-09-04T18:08:24.131519Z","shell.execute_reply":"2025-09-04T18:08:24.147764Z"}},"outputs":[],"execution_count":51},{"cell_type":"code","source":"bag.fit(x_train,y_train)\ny_pred = bag.predict(x_test)\nprint(\"Accuracy of Bagging\",accuracy_score(y_test,y_pred)) #highest so far","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vUfYsTaZqXf4","outputId":"05575d03-f37b-4e56-85d7-80f4c15277f4","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:24.149713Z","iopub.execute_input":"2025-09-04T18:08:24.149958Z","iopub.status.idle":"2025-09-04T18:08:25.120004Z","shell.execute_reply.started":"2025-09-04T18:08:24.149940Z","shell.execute_reply":"2025-09-04T18:08:25.119019Z"}},"outputs":[{"name":"stdout","text":"Accuracy of Bagging 0.7938931297709924\n","output_type":"stream"}],"execution_count":52},{"cell_type":"code","source":"x_train.shape","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z42JyaHn1OAE","outputId":"647d96df-3492-45e7-b3c8-6d0943762947","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:25.121018Z","iopub.execute_input":"2025-09-04T18:08:25.122016Z","iopub.status.idle":"2025-09-04T18:08:25.127142Z","shell.execute_reply.started":"2025-09-04T18:08:25.121991Z","shell.execute_reply":"2025-09-04T18:08:25.126264Z"}},"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"(1047, 5)"},"metadata":{}}],"execution_count":53},{"cell_type":"code","source":"bag.estimators_samples_[0].shape #rows","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vsVcuzMDr5X8","outputId":"9948db72-ad1f-4c93-943e-bee8b5b46b0a","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:25.128345Z","iopub.execute_input":"2025-09-04T18:08:25.128562Z","iopub.status.idle":"2025-09-04T18:08:25.328844Z","shell.execute_reply.started":"2025-09-04T18:08:25.128545Z","shell.execute_reply":"2025-09-04T18:08:25.328064Z"}},"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"(261,)"},"metadata":{}}],"execution_count":54},{"cell_type":"code","source":"cf = confusion_matrix(y_test,bag.predict(x_test))","metadata":{"id":"UhZaxgjmsL94","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:25.329597Z","iopub.execute_input":"2025-09-04T18:08:25.329891Z","iopub.status.idle":"2025-09-04T18:08:25.528400Z","shell.execute_reply.started":"2025-09-04T18:08:25.329870Z","shell.execute_reply":"2025-09-04T18:08:25.527648Z"}},"outputs":[],"execution_count":55},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(cf, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Voting Classifier')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"8qqnPxqtqy2R","outputId":"746bee97-3dde-4290-e72a-4fe62b3cf113","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:25.529575Z","iopub.execute_input":"2025-09-04T18:08:25.529896Z","iopub.status.idle":"2025-09-04T18:08:25.721453Z","shell.execute_reply.started":"2025-09-04T18:08:25.529851Z","shell.execute_reply":"2025-09-04T18:08:25.720650Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":56},{"cell_type":"code","source":"bag2 = BaggingClassifier(\n  estimator=LogisticRegression(),\n    n_estimators=40,\n    max_samples=0.5, #row sampling\n    bootstrap=False, #pasting vs bagging\n    #max_features=0.5, #column sampling\n    bootstrap_features=False,\n    random_state=42,\n    n_jobs=-1\n)","metadata":{"id":"krbIDgJgseqO","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:25.722498Z","iopub.execute_input":"2025-09-04T18:08:25.722793Z","iopub.status.idle":"2025-09-04T18:08:25.727768Z","shell.execute_reply.started":"2025-09-04T18:08:25.722772Z","shell.execute_reply":"2025-09-04T18:08:25.726921Z"}},"outputs":[],"execution_count":57},{"cell_type":"code","source":"bag2.fit(x_train,y_train)\ny_pred = bag2.predict(x_test)\nprint(\"Accuracy of Bagging\",accuracy_score(y_test,y_pred)) #best of this is 0.81 with parameter tunning","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G3i5fir9snkA","outputId":"1d22a607-c2b5-4efc-9d63-ccfd7f8c6076","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:25.728821Z","iopub.execute_input":"2025-09-04T18:08:25.729133Z","iopub.status.idle":"2025-09-04T18:08:26.054021Z","shell.execute_reply.started":"2025-09-04T18:08:25.729097Z","shell.execute_reply":"2025-09-04T18:08:26.053126Z"}},"outputs":[{"name":"stdout","text":"Accuracy of Bagging 0.7633587786259542\n","output_type":"stream"}],"execution_count":58},{"cell_type":"code","source":"cf2 = confusion_matrix(y_test,bag2.predict(x_test))","metadata":{"id":"ZmsMEsLwsv6h","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:26.055207Z","iopub.execute_input":"2025-09-04T18:08:26.055572Z","iopub.status.idle":"2025-09-04T18:08:26.075569Z","shell.execute_reply.started":"2025-09-04T18:08:26.055550Z","shell.execute_reply":"2025-09-04T18:08:26.074603Z"}},"outputs":[],"execution_count":59},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(cf2, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Bagging LGR')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"XtSviTU3tXZN","outputId":"fec590e8-7046-4fde-ef5c-d977aa6b90f9","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:26.076573Z","iopub.execute_input":"2025-09-04T18:08:26.076959Z","iopub.status.idle":"2025-09-04T18:08:26.280245Z","shell.execute_reply.started":"2025-09-04T18:08:26.076929Z","shell.execute_reply":"2025-09-04T18:08:26.279300Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":60},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(cf, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Bagging DT')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"LQqaGoTYth9l","outputId":"19bc10f8-6573-4a3b-e0c0-2358aa1e727c","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:26.281266Z","iopub.execute_input":"2025-09-04T18:08:26.281702Z","iopub.status.idle":"2025-09-04T18:08:26.478775Z","shell.execute_reply.started":"2025-09-04T18:08:26.281671Z","shell.execute_reply":"2025-09-04T18:08:26.477876Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":61},{"cell_type":"code","source":"bag3 = BaggingClassifier(\n  estimator=KNeighborsClassifier(),\n    n_estimators=400,\n    max_samples=0.3, #row sampling\n    bootstrap=False, #pasting vs bagging\n    #max_features=0.5, #column sampling\n    random_state=42,\n    n_jobs=-1\n)","metadata":{"id":"e41pZbK2tlWe","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:26.479753Z","iopub.execute_input":"2025-09-04T18:08:26.480068Z","iopub.status.idle":"2025-09-04T18:08:26.484761Z","shell.execute_reply.started":"2025-09-04T18:08:26.480041Z","shell.execute_reply":"2025-09-04T18:08:26.483985Z"}},"outputs":[],"execution_count":62},{"cell_type":"code","source":"bag3.fit(x_train,y_train)\ny_pred = bag3.predict(x_test)\nprint(\"Accuracy of Bagging\",accuracy_score(y_test,y_pred))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"opXcogyLtset","outputId":"b5e7f089-f5fa-4ae9-c283-b01889fe68ef","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:26.485724Z","iopub.execute_input":"2025-09-04T18:08:26.486115Z","iopub.status.idle":"2025-09-04T18:08:27.186064Z","shell.execute_reply.started":"2025-09-04T18:08:26.486070Z","shell.execute_reply":"2025-09-04T18:08:27.185302Z"}},"outputs":[{"name":"stdout","text":"Accuracy of Bagging 0.7442748091603053\n","output_type":"stream"}],"execution_count":63},{"cell_type":"code","source":"cf3 = confusion_matrix(y_test,bag3.predict(x_test))","metadata":{"id":"oYlS2zEDtzs_","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:27.186968Z","iopub.execute_input":"2025-09-04T18:08:27.187223Z","iopub.status.idle":"2025-09-04T18:08:27.605023Z","shell.execute_reply.started":"2025-09-04T18:08:27.187202Z","shell.execute_reply":"2025-09-04T18:08:27.604119Z"}},"outputs":[],"execution_count":64},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(cf3, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Bagging KNN')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"MR9BwNcvuR7w","outputId":"1ef3b11b-0f53-42d3-b04a-2195096c89e1","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:27.605937Z","iopub.execute_input":"2025-09-04T18:08:27.606199Z","iopub.status.idle":"2025-09-04T18:08:27.797927Z","shell.execute_reply.started":"2025-09-04T18:08:27.606173Z","shell.execute_reply":"2025-09-04T18:08:27.797161Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":65},{"cell_type":"markdown","source":"<h1> Best Score so far </h1>","metadata":{"id":"wxeHYkZfu-UB"}},{"cell_type":"code","source":"accuracy_score(y_test,bag.predict(x_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fMlHuJTdu-CW","outputId":"16245a75-f320-4156-bf5e-0e2f3023fe02","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:27.798735Z","iopub.execute_input":"2025-09-04T18:08:27.799041Z","iopub.status.idle":"2025-09-04T18:08:28.006425Z","shell.execute_reply.started":"2025-09-04T18:08:27.799021Z","shell.execute_reply":"2025-09-04T18:08:28.005679Z"}},"outputs":[{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"0.7938931297709924"},"metadata":{}}],"execution_count":66},{"cell_type":"code","source":"tit = pd.read_csv('/kaggle/input/titanic-5-features-cleanedds/Titanic.csv')","metadata":{"id":"DHNJ34hoVTB7","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:28.013999Z","iopub.execute_input":"2025-09-04T18:08:28.014271Z","iopub.status.idle":"2025-09-04T18:08:28.027883Z","shell.execute_reply.started":"2025-09-04T18:08:28.014251Z","shell.execute_reply":"2025-09-04T18:08:28.027096Z"}},"outputs":[],"execution_count":67},{"cell_type":"code","source":"tit.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"SjWtL4bfVYwk","outputId":"de65695e-4b05-4eac-fca5-fb280561f9ae","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:28.028826Z","iopub.execute_input":"2025-09-04T18:08:28.029125Z","iopub.status.idle":"2025-09-04T18:08:28.044847Z","shell.execute_reply.started":"2025-09-04T18:08:28.029101Z","shell.execute_reply":"2025-09-04T18:08:28.044115Z"}},"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass  Sex   Age     Fare  Embarked\n0         0       3    1  22.0   7.2500         2\n1         1       1    0  38.0  71.2833         0\n2         1       3    0  26.0   7.9250         2\n3         1       1    0  35.0  53.1000         2\n4         0       3    1  35.0   8.0500         2","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.0</td>\n      <td>7.2500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.0</td>\n      <td>71.2833</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>7.9250</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>53.1000</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>8.0500</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":68},{"cell_type":"code","source":"x = tit.drop('Survived',axis=1)\ny = tit['Survived']","metadata":{"id":"3ci0vNJuVbwK","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:28.045657Z","iopub.execute_input":"2025-09-04T18:08:28.045906Z","iopub.status.idle":"2025-09-04T18:08:28.062222Z","shell.execute_reply.started":"2025-09-04T18:08:28.045888Z","shell.execute_reply":"2025-09-04T18:08:28.061348Z"}},"outputs":[],"execution_count":69},{"cell_type":"code","source":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)","metadata":{"id":"lH_7TeECVeBK","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:28.063100Z","iopub.execute_input":"2025-09-04T18:08:28.063412Z","iopub.status.idle":"2025-09-04T18:08:28.084533Z","shell.execute_reply.started":"2025-09-04T18:08:28.063381Z","shell.execute_reply":"2025-09-04T18:08:28.083769Z"}},"outputs":[],"execution_count":70},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier","metadata":{"id":"PSPO2zvqVfzy","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:28.085318Z","iopub.execute_input":"2025-09-04T18:08:28.085744Z","iopub.status.idle":"2025-09-04T18:08:28.104169Z","shell.execute_reply.started":"2025-09-04T18:08:28.085720Z","shell.execute_reply":"2025-09-04T18:08:28.103200Z"}},"outputs":[],"execution_count":71},{"cell_type":"code","source":"rf = RandomForestClassifier()\nrf.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"33aYoES8VkQN","outputId":"4606436f-f725-4742-fced-09a88129f9af","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:28.105111Z","iopub.execute_input":"2025-09-04T18:08:28.105369Z","iopub.status.idle":"2025-09-04T18:08:28.301145Z","shell.execute_reply.started":"2025-09-04T18:08:28.105348Z","shell.execute_reply":"2025-09-04T18:08:28.300040Z"}},"outputs":[{"execution_count":72,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier()","text/html":"<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" checked><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":72},{"cell_type":"code","source":"accuracy_score(y_test,rf.predict(x_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0x3d4_X2VqKa","outputId":"e444f2da-53e8-485b-eca7-f87f33eadd32","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:28.302048Z","iopub.execute_input":"2025-09-04T18:08:28.302313Z","iopub.status.idle":"2025-09-04T18:08:28.319567Z","shell.execute_reply.started":"2025-09-04T18:08:28.302295Z","shell.execute_reply":"2025-09-04T18:08:28.318664Z"}},"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"0.7877094972067039"},"metadata":{}}],"execution_count":73},{"cell_type":"code","source":"confusion_matrix(y_test,rf.predict(x_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ciRFUduVVs8Z","outputId":"be7268b9-bf7c-43c8-f326-a040d6a78740","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:28.320450Z","iopub.execute_input":"2025-09-04T18:08:28.320660Z","iopub.status.idle":"2025-09-04T18:08:28.337922Z","shell.execute_reply.started":"2025-09-04T18:08:28.320644Z","shell.execute_reply":"2025-09-04T18:08:28.337269Z"}},"outputs":[{"execution_count":74,"output_type":"execute_result","data":{"text/plain":"array([[87, 18],\n       [20, 54]])"},"metadata":{}}],"execution_count":74},{"cell_type":"markdown","source":"<h2> Lets do hyperparameter tunning </h2>","metadata":{"id":"BPiaCE0FVvsF"}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV","metadata":{"id":"uNqCGTVWWIgQ","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:28.338968Z","iopub.execute_input":"2025-09-04T18:08:28.339301Z","iopub.status.idle":"2025-09-04T18:08:28.344567Z","shell.execute_reply.started":"2025-09-04T18:08:28.339273Z","shell.execute_reply":"2025-09-04T18:08:28.343730Z"}},"outputs":[],"execution_count":75},{"cell_type":"code","source":"param_grid = {\n    'n_estimators': [100, 200, 300],            # Number of trees\n    'max_depth': [None, 10, 20, 30],            # Maximum depth of each tree\n    'max_features': ['sqrt', 'log2', None],     # Number of features to consider at each split\n    'min_samples_split': [2,3,4,5,6,7,8,9],            # Minimum samples required to split a node\n    'min_samples_leaf': [1, 2, 4],              # Minimum samples required at each leaf node\n    'bootstrap': [True, False],\n    'criterion': ['gini', 'entropy']\n    }             # Whether bootstrap samples are used","metadata":{"id":"NdJv3BQeV0eq","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:28.345429Z","iopub.execute_input":"2025-09-04T18:08:28.346335Z","iopub.status.idle":"2025-09-04T18:08:28.364497Z","shell.execute_reply.started":"2025-09-04T18:08:28.346308Z","shell.execute_reply":"2025-09-04T18:08:28.363268Z"}},"outputs":[],"execution_count":76},{"cell_type":"code","source":"rf = RandomForestClassifier(random_state=42)\nrandom_search = RandomizedSearchCV(\n    estimator=rf,\n    param_distributions=param_grid,\n    n_iter=50,                  # Number of random combinations to try\n    cv=5,                       # 5-fold cross-validation\n    scoring='accuracy',        # You can change this to 'f1', 'roc_auc', etc.\n    random_state=42,\n    n_jobs=-1                   # Use all available cores\n)\n","metadata":{"id":"IcC49gDBWCP4","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:28.365546Z","iopub.execute_input":"2025-09-04T18:08:28.365864Z","iopub.status.idle":"2025-09-04T18:08:28.381881Z","shell.execute_reply.started":"2025-09-04T18:08:28.365832Z","shell.execute_reply":"2025-09-04T18:08:28.380918Z"}},"outputs":[],"execution_count":77},{"cell_type":"code","source":"random_search.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":164},"id":"erNwobBj1GWq","outputId":"326989d5-77f5-4f8a-ce19-bf02e92956c4","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:08:28.382654Z","iopub.execute_input":"2025-09-04T18:08:28.382866Z","iopub.status.idle":"2025-09-04T18:09:04.081132Z","shell.execute_reply.started":"2025-09-04T18:08:28.382848Z","shell.execute_reply":"2025-09-04T18:09:04.080249Z"}},"outputs":[{"execution_count":78,"output_type":"execute_result","data":{"text/plain":"RandomizedSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n                   n_iter=50, n_jobs=-1,\n                   param_distributions={'bootstrap': [True, False],\n                                        'criterion': ['gini', 'entropy'],\n                                        'max_depth': [None, 10, 20, 30],\n                                        'max_features': ['sqrt', 'log2', None],\n                                        'min_samples_leaf': [1, 2, 4],\n                                        'min_samples_split': [2, 3, 4, 5, 6, 7,\n                                                              8, 9],\n                                        'n_estimators': [100, 200, 300]},\n                   random_state=42, scoring='accuracy')","text/html":"<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n                   n_iter=50, n_jobs=-1,\n                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n                                        &#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n                                        &#x27;max_depth&#x27;: [None, 10, 20, 30],\n                                        &#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;, None],\n                                        &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n                                        &#x27;min_samples_split&#x27;: [2, 3, 4, 5, 6, 7,\n                                                              8, 9],\n                                        &#x27;n_estimators&#x27;: [100, 200, 300]},\n                   random_state=42, scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n                   n_iter=50, n_jobs=-1,\n                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n                                        &#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n                                        &#x27;max_depth&#x27;: [None, 10, 20, 30],\n                                        &#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;, None],\n                                        &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n                                        &#x27;min_samples_split&#x27;: [2, 3, 4, 5, 6, 7,\n                                                              8, 9],\n                                        &#x27;n_estimators&#x27;: [100, 200, 300]},\n                   random_state=42, scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":78},{"cell_type":"code","source":"random_search.best_score_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XHSmuS_T1og1","outputId":"5a22532a-215c-4753-dfb3-83a8fbdfbf81","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:04.082034Z","iopub.execute_input":"2025-09-04T18:09:04.082360Z","iopub.status.idle":"2025-09-04T18:09:04.087703Z","shell.execute_reply.started":"2025-09-04T18:09:04.082340Z","shell.execute_reply":"2025-09-04T18:09:04.087021Z"}},"outputs":[{"execution_count":79,"output_type":"execute_result","data":{"text/plain":"0.8314586821629076"},"metadata":{}}],"execution_count":79},{"cell_type":"code","source":"random_search.best_params_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pxn5fTTj1syR","outputId":"0e98ada9-9f33-41d0-9f37-6d5de0fcccdf","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:04.088548Z","iopub.execute_input":"2025-09-04T18:09:04.088772Z","iopub.status.idle":"2025-09-04T18:09:04.109020Z","shell.execute_reply.started":"2025-09-04T18:09:04.088744Z","shell.execute_reply":"2025-09-04T18:09:04.108289Z"}},"outputs":[{"execution_count":80,"output_type":"execute_result","data":{"text/plain":"{'n_estimators': 300,\n 'min_samples_split': 6,\n 'min_samples_leaf': 4,\n 'max_features': 'log2',\n 'max_depth': None,\n 'criterion': 'gini',\n 'bootstrap': True}"},"metadata":{}}],"execution_count":80},{"cell_type":"code","source":"accuracy_score(y_test,random_search.predict(x_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RWrGl8yR0pKX","outputId":"5fd64ef6-1f2c-443d-e643-63604425ea97","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:04.109910Z","iopub.execute_input":"2025-09-04T18:09:04.110198Z","iopub.status.idle":"2025-09-04T18:09:04.149137Z","shell.execute_reply.started":"2025-09-04T18:09:04.110174Z","shell.execute_reply":"2025-09-04T18:09:04.148184Z"}},"outputs":[{"execution_count":81,"output_type":"execute_result","data":{"text/plain":"0.8268156424581006"},"metadata":{}}],"execution_count":81},{"cell_type":"code","source":"ab = AdaBoostClassifier()\nab.fit(x_train,y_train)","metadata":{"id":"vgStzDhDXVng","colab":{"base_uri":"https://localhost:8080/","height":80},"outputId":"fb1daf13-308d-4e99-9bc9-37981ae7ebed","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:04.150214Z","iopub.execute_input":"2025-09-04T18:09:04.150507Z","iopub.status.idle":"2025-09-04T18:09:04.243518Z","shell.execute_reply.started":"2025-09-04T18:09:04.150488Z","shell.execute_reply":"2025-09-04T18:09:04.242625Z"}},"outputs":[{"execution_count":82,"output_type":"execute_result","data":{"text/plain":"AdaBoostClassifier()","text/html":"<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>AdaBoostClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" checked><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">AdaBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>AdaBoostClassifier()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":82},{"cell_type":"code","source":"accuracy_score(y_test,ab.predict(x_test))","metadata":{"id":"2FMva8NdXYLm","colab":{"base_uri":"https://localhost:8080/"},"outputId":"218b53b3-384b-4e16-802c-2c3259bb2208","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:04.244338Z","iopub.execute_input":"2025-09-04T18:09:04.244648Z","iopub.status.idle":"2025-09-04T18:09:04.276556Z","shell.execute_reply.started":"2025-09-04T18:09:04.244619Z","shell.execute_reply":"2025-09-04T18:09:04.275762Z"}},"outputs":[{"execution_count":83,"output_type":"execute_result","data":{"text/plain":"0.8100558659217877"},"metadata":{}}],"execution_count":83},{"cell_type":"code","source":"confusion_matrix(y_test,ab.predict(x_test))","metadata":{"id":"1i4banbDXX_o","colab":{"base_uri":"https://localhost:8080/"},"outputId":"080d59b7-f154-449f-8807-7b5e2739e8fb","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:04.277691Z","iopub.execute_input":"2025-09-04T18:09:04.278107Z","iopub.status.idle":"2025-09-04T18:09:04.300830Z","shell.execute_reply.started":"2025-09-04T18:09:04.278081Z","shell.execute_reply":"2025-09-04T18:09:04.299937Z"}},"outputs":[{"execution_count":84,"output_type":"execute_result","data":{"text/plain":"array([[88, 17],\n       [17, 57]])"},"metadata":{}}],"execution_count":84},{"cell_type":"code","source":"import random\nfrom scipy.stats import randint, uniform","metadata":{"id":"2-bwGCFrXsMU","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:04.301761Z","iopub.execute_input":"2025-09-04T18:09:04.301996Z","iopub.status.idle":"2025-09-04T18:09:04.306623Z","shell.execute_reply.started":"2025-09-04T18:09:04.301978Z","shell.execute_reply":"2025-09-04T18:09:04.305673Z"}},"outputs":[],"execution_count":85},{"cell_type":"code","source":"param_dist = {\n    'n_estimators': randint(50, 200),           # Number of boosting rounds\n    'learning_rate': uniform(0.01, 1.0),        # Contribution of each weak learner\n    'algorithm': ['SAMME', 'SAMME.R']           # Boosting algorithm\n}\n\n# Set up RandomizedSearchCV\nrandom_search = RandomizedSearchCV(\n    estimator=ab,\n    param_distributions=param_dist,\n    n_iter=50,                  # Number of random combinations to try\n    cv=5,                       # 5-fold cross-validation\n    scoring='accuracy',        # You can change this to 'f1', 'roc_auc', etc.\n    random_state=42,\n    n_jobs=-1                   # Use all available cores\n)","metadata":{"id":"XCgJGLHVXoZa","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:04.307818Z","iopub.execute_input":"2025-09-04T18:09:04.308178Z","iopub.status.idle":"2025-09-04T18:09:04.326320Z","shell.execute_reply.started":"2025-09-04T18:09:04.308153Z","shell.execute_reply":"2025-09-04T18:09:04.325520Z"}},"outputs":[],"execution_count":86},{"cell_type":"code","source":"random_search.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":763},"id":"l_uX-3tn1-WT","outputId":"67cfcc92-efaa-4fc6-9e8c-dd9b4a9cc0cd","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:04.327306Z","iopub.execute_input":"2025-09-04T18:09:04.327646Z","iopub.status.idle":"2025-09-04T18:09:23.955453Z","shell.execute_reply.started":"2025-09-04T18:09:04.327621Z","shell.execute_reply":"2025-09-04T18:09:23.954563Z"}},"outputs":[{"execution_count":87,"output_type":"execute_result","data":{"text/plain":"RandomizedSearchCV(cv=5, estimator=AdaBoostClassifier(), n_iter=50, n_jobs=-1,\n                   param_distributions={'algorithm': ['SAMME', 'SAMME.R'],\n                                        'learning_rate': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x7aef43071f10>,\n                                        'n_estimators': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7aef44202190>},\n                   random_state=42, scoring='accuracy')","text/html":"<style>#sk-container-id-9 {color: black;background-color: white;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, estimator=AdaBoostClassifier(), n_iter=50, n_jobs=-1,\n                   param_distributions={&#x27;algorithm&#x27;: [&#x27;SAMME&#x27;, &#x27;SAMME.R&#x27;],\n                                        &#x27;learning_rate&#x27;: &lt;scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x7aef43071f10&gt;,\n                                        &#x27;n_estimators&#x27;: &lt;scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7aef44202190&gt;},\n                   random_state=42, scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5, estimator=AdaBoostClassifier(), n_iter=50, n_jobs=-1,\n                   param_distributions={&#x27;algorithm&#x27;: [&#x27;SAMME&#x27;, &#x27;SAMME.R&#x27;],\n                                        &#x27;learning_rate&#x27;: &lt;scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x7aef43071f10&gt;,\n                                        &#x27;n_estimators&#x27;: &lt;scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x7aef44202190&gt;},\n                   random_state=42, scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: AdaBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>AdaBoostClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" ><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">AdaBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>AdaBoostClassifier()</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":87},{"cell_type":"code","source":"random_search.best_score_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZyxvR9mW2Jqd","outputId":"c764d8eb-c72b-40a3-fba5-73a7b9e53794","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:23.956378Z","iopub.execute_input":"2025-09-04T18:09:23.956581Z","iopub.status.idle":"2025-09-04T18:09:23.962077Z","shell.execute_reply.started":"2025-09-04T18:09:23.956565Z","shell.execute_reply":"2025-09-04T18:09:23.961360Z"}},"outputs":[{"execution_count":88,"output_type":"execute_result","data":{"text/plain":"0.8019304639022948"},"metadata":{}}],"execution_count":88},{"cell_type":"code","source":"random_search.best_params_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8Lg8sHrF2L6P","outputId":"3668ac7f-0f6b-459e-ba22-c47345b2a5d1","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:23.962774Z","iopub.execute_input":"2025-09-04T18:09:23.963027Z","iopub.status.idle":"2025-09-04T18:09:23.983160Z","shell.execute_reply.started":"2025-09-04T18:09:23.963008Z","shell.execute_reply":"2025-09-04T18:09:23.982439Z"}},"outputs":[{"execution_count":89,"output_type":"execute_result","data":{"text/plain":"{'algorithm': 'SAMME.R',\n 'learning_rate': 0.9025589984899778,\n 'n_estimators': 124}"},"metadata":{}}],"execution_count":89},{"cell_type":"code","source":"accuracy_score(y_test,random_search.predict(x_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FWtjTtSF2OVs","outputId":"421392fa-0fb2-4ed1-88b3-dab9cb4b5393","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:23.984006Z","iopub.execute_input":"2025-09-04T18:09:23.984276Z","iopub.status.idle":"2025-09-04T18:09:24.023588Z","shell.execute_reply.started":"2025-09-04T18:09:23.984248Z","shell.execute_reply":"2025-09-04T18:09:24.022830Z"}},"outputs":[{"execution_count":90,"output_type":"execute_result","data":{"text/plain":"0.8324022346368715"},"metadata":{}}],"execution_count":90},{"cell_type":"code","source":"confusion_matrix(y_test,random_search.predict(x_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9cBXZC8T2QsP","outputId":"ee5ec1a4-69ee-45c6-add6-2c4f14a2835b","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:24.024496Z","iopub.execute_input":"2025-09-04T18:09:24.024808Z","iopub.status.idle":"2025-09-04T18:09:24.052930Z","shell.execute_reply.started":"2025-09-04T18:09:24.024776Z","shell.execute_reply":"2025-09-04T18:09:24.052254Z"}},"outputs":[{"execution_count":91,"output_type":"execute_result","data":{"text/plain":"array([[91, 14],\n       [16, 58]])"},"metadata":{}}],"execution_count":91},{"cell_type":"code","source":"import joblib\n\n# Save\njoblib.dump(bag, \"bagging_model.pkl\")\n\n# Load\nmodel = joblib.load(\"bagging_model.pkl\")","metadata":{"id":"WYJhBjip8kDY","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:09:24.053754Z","iopub.execute_input":"2025-09-04T18:09:24.054004Z","iopub.status.idle":"2025-09-04T18:09:24.591162Z","shell.execute_reply.started":"2025-09-04T18:09:24.053986Z","shell.execute_reply":"2025-09-04T18:09:24.590383Z"}},"outputs":[],"execution_count":92}]}