{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"provenance":[]},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12962981,"sourceType":"datasetVersion","datasetId":8204152}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport kagglehub\nimport os","metadata":{"id":"cQZAhIZKepXI","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.445712Z","iopub.execute_input":"2025-09-04T18:04:21.446022Z","iopub.status.idle":"2025-09-04T18:04:21.450671Z","shell.execute_reply.started":"2025-09-04T18:04:21.445990Z","shell.execute_reply":"2025-09-04T18:04:21.449740Z"}},"outputs":[],"execution_count":118},{"cell_type":"code","source":"df1 = pd.read_csv('/kaggle/input/titanic-5-features-cleanedds/train.csv')","metadata":{"id":"tsn-8ciue3d2","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.452037Z","iopub.execute_input":"2025-09-04T18:04:21.452628Z","iopub.status.idle":"2025-09-04T18:04:21.477013Z","shell.execute_reply.started":"2025-09-04T18:04:21.452603Z","shell.execute_reply":"2025-09-04T18:04:21.476072Z"}},"outputs":[],"execution_count":119},{"cell_type":"code","source":"df2 = pd.read_csv('/kaggle/input/titanic-5-features-cleanedds/test.csv')","metadata":{"id":"plh2d9GQfI-i","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.478387Z","iopub.execute_input":"2025-09-04T18:04:21.478668Z","iopub.status.idle":"2025-09-04T18:04:21.488990Z","shell.execute_reply.started":"2025-09-04T18:04:21.478642Z","shell.execute_reply":"2025-09-04T18:04:21.488009Z"}},"outputs":[],"execution_count":120},{"cell_type":"code","source":"df = pd.concat([df1,df2])","metadata":{"id":"7TlxDAL5By9e","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.489991Z","iopub.execute_input":"2025-09-04T18:04:21.490581Z","iopub.status.idle":"2025-09-04T18:04:21.504059Z","shell.execute_reply.started":"2025-09-04T18:04:21.490552Z","shell.execute_reply":"2025-09-04T18:04:21.503165Z"}},"outputs":[],"execution_count":121},{"cell_type":"code","source":"df.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":258},"id":"9H4tZxdIfIsc","outputId":"6f9b69aa-515f-4582-dacc-1d62d60f51ed","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.506215Z","iopub.execute_input":"2025-09-04T18:04:21.506539Z","iopub.status.idle":"2025-09-04T18:04:21.536949Z","shell.execute_reply.started":"2025-09-04T18:04:21.506510Z","shell.execute_reply":"2025-09-04T18:04:21.535958Z"}},"outputs":[{"execution_count":122,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1       0.0       3   \n1            2       1.0       1   \n2            3       1.0       3   \n3            4       1.0       1   \n4            5       0.0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":122},{"cell_type":"code","source":"df.columns","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-cAPkElHCJAb","outputId":"4939c38f-6f5f-436f-c594-afabbe0c2267","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.538058Z","iopub.execute_input":"2025-09-04T18:04:21.538397Z","iopub.status.idle":"2025-09-04T18:04:21.554238Z","shell.execute_reply.started":"2025-09-04T18:04:21.538368Z","shell.execute_reply":"2025-09-04T18:04:21.553120Z"}},"outputs":[{"execution_count":123,"output_type":"execute_result","data":{"text/plain":"Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n      dtype='object')"},"metadata":{}}],"execution_count":123},{"cell_type":"code","source":"df.drop(['PassengerId','Name','SibSp','Parch','Ticket','Cabin'],axis=1,inplace=True)","metadata":{"id":"JnJSDuV9fQeE","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.555260Z","iopub.execute_input":"2025-09-04T18:04:21.555573Z","iopub.status.idle":"2025-09-04T18:04:21.571739Z","shell.execute_reply.started":"2025-09-04T18:04:21.555545Z","shell.execute_reply":"2025-09-04T18:04:21.570498Z"}},"outputs":[],"execution_count":124},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"-rTCCk6Ofg6X","outputId":"a70b1b65-71fd-48d9-b014-5899597ee370","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.572686Z","iopub.execute_input":"2025-09-04T18:04:21.573679Z","iopub.status.idle":"2025-09-04T18:04:21.595630Z","shell.execute_reply.started":"2025-09-04T18:04:21.573646Z","shell.execute_reply":"2025-09-04T18:04:21.594681Z"}},"outputs":[{"execution_count":125,"output_type":"execute_result","data":{"text/plain":"Survived    418\nPclass        0\nSex           0\nAge         263\nFare          1\nEmbarked      2\ndtype: int64"},"metadata":{}}],"execution_count":125},{"cell_type":"code","source":"df['Survived'].fillna(df['Survived'].mean(),inplace=True)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FTQKKjXlC-7M","outputId":"2e2160a8-8867-4dbe-8353-b85a8a63b180","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.596576Z","iopub.execute_input":"2025-09-04T18:04:21.596858Z","iopub.status.idle":"2025-09-04T18:04:21.615041Z","shell.execute_reply.started":"2025-09-04T18:04:21.596835Z","shell.execute_reply":"2025-09-04T18:04:21.613925Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/2983833627.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['Survived'].fillna(df['Survived'].mean(),inplace=True)\n","output_type":"stream"}],"execution_count":126},{"cell_type":"code","source":"df['Embarked'].fillna('S',inplace=True)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3kIGgDfWfqhj","outputId":"afbc1e50-7da1-4650-9be1-224fe8154146","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.618260Z","iopub.execute_input":"2025-09-04T18:04:21.618673Z","iopub.status.idle":"2025-09-04T18:04:21.634684Z","shell.execute_reply.started":"2025-09-04T18:04:21.618650Z","shell.execute_reply":"2025-09-04T18:04:21.633648Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/3895404187.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['Embarked'].fillna('S',inplace=True)\n","output_type":"stream"}],"execution_count":127},{"cell_type":"code","source":"df['Age'].fillna(df['Age'].mean(),inplace=True)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UftHs154m799","outputId":"a95b4f22-0ba1-4f93-9257-062616e5a8ce","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.635505Z","iopub.execute_input":"2025-09-04T18:04:21.635767Z","iopub.status.idle":"2025-09-04T18:04:21.652541Z","shell.execute_reply.started":"2025-09-04T18:04:21.635740Z","shell.execute_reply":"2025-09-04T18:04:21.651326Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/694922604.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['Age'].fillna(df['Age'].mean(),inplace=True)\n","output_type":"stream"}],"execution_count":128},{"cell_type":"code","source":"df['Fare'].fillna(df['Fare'].mean(),inplace=True)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MtnY_wEuDKRW","outputId":"522498bd-3a09-4873-d326-be161b99b12c","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.653480Z","iopub.execute_input":"2025-09-04T18:04:21.653798Z","iopub.status.idle":"2025-09-04T18:04:21.669998Z","shell.execute_reply.started":"2025-09-04T18:04:21.653753Z","shell.execute_reply":"2025-09-04T18:04:21.668750Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/1005235208.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['Fare'].fillna(df['Fare'].mean(),inplace=True)\n","output_type":"stream"}],"execution_count":129},{"cell_type":"code","source":"df.dtypes","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"3xe8M0txf4Av","outputId":"6823f58d-36e3-4833-b72b-15789d81a7a9","trusted":true,"execution":{"iopub.execute_input":"2025-09-04T18:04:21.671094Z","iopub.status.idle":"2025-09-04T18:04:21.698365Z","shell.execute_reply.started":"2025-09-04T18:04:21.671066Z","shell.execute_reply":"2025-09-04T18:04:21.697462Z"}},"outputs":[{"execution_count":130,"output_type":"execute_result","data":{"text/plain":"Survived    float64\nPclass        int64\nSex          object\nAge         float64\nFare        float64\nEmbarked     object\ndtype: object"},"metadata":{}}],"execution_count":130},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])","metadata":{"id":"TaYdbxPLgDvo","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.699263Z","iopub.execute_input":"2025-09-04T18:04:21.699571Z","iopub.status.idle":"2025-09-04T18:04:21.717167Z","shell.execute_reply.started":"2025-09-04T18:04:21.699544Z","shell.execute_reply":"2025-09-04T18:04:21.716240Z"}},"outputs":[],"execution_count":131},{"cell_type":"code","source":"df['Embarked'] = le.fit_transform(df['Embarked'])","metadata":{"id":"O-0THSP-g8dF","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.718082Z","iopub.execute_input":"2025-09-04T18:04:21.718410Z","iopub.status.idle":"2025-09-04T18:04:21.733131Z","shell.execute_reply.started":"2025-09-04T18:04:21.718383Z","shell.execute_reply":"2025-09-04T18:04:21.732277Z"}},"outputs":[],"execution_count":132},{"cell_type":"code","source":"df.dtypes","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"-0YMTVwBDWCW","outputId":"c4170c89-aac6-4330-dee2-0ad16dc8f21f","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.733985Z","iopub.execute_input":"2025-09-04T18:04:21.734313Z","iopub.status.idle":"2025-09-04T18:04:21.751983Z","shell.execute_reply.started":"2025-09-04T18:04:21.734286Z","shell.execute_reply":"2025-09-04T18:04:21.751264Z"}},"outputs":[{"execution_count":133,"output_type":"execute_result","data":{"text/plain":"Survived    float64\nPclass        int64\nSex           int64\nAge         float64\nFare        float64\nEmbarked      int64\ndtype: object"},"metadata":{}}],"execution_count":133},{"cell_type":"code","source":"df['Survived'] = df['Survived'].astype(int)","metadata":{"id":"tkB4hLYWhGWW","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.752802Z","iopub.execute_input":"2025-09-04T18:04:21.753259Z","iopub.status.idle":"2025-09-04T18:04:21.768582Z","shell.execute_reply.started":"2025-09-04T18:04:21.753227Z","shell.execute_reply":"2025-09-04T18:04:21.767670Z"}},"outputs":[],"execution_count":134},{"cell_type":"code","source":"df","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"VGTs_xuMD6S1","outputId":"86d90bf3-fbf0-4c80-abc1-1403c85c067f","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.769742Z","iopub.execute_input":"2025-09-04T18:04:21.770071Z","iopub.status.idle":"2025-09-04T18:04:21.793573Z","shell.execute_reply.started":"2025-09-04T18:04:21.770043Z","shell.execute_reply":"2025-09-04T18:04:21.792588Z"}},"outputs":[{"execution_count":135,"output_type":"execute_result","data":{"text/plain":"     Survived  Pclass  Sex        Age      Fare  Embarked\n0           0       3    1  22.000000    7.2500         2\n1           1       1    0  38.000000   71.2833         0\n2           1       3    0  26.000000    7.9250         2\n3           1       1    0  35.000000   53.1000         2\n4           0       3    1  35.000000    8.0500         2\n..        ...     ...  ...        ...       ...       ...\n413         0       3    1  29.881138    8.0500         2\n414         0       1    0  39.000000  108.9000         0\n415         0       3    1  38.500000    7.2500         2\n416         0       3    1  29.881138    8.0500         2\n417         0       3    1  29.881138   22.3583         0\n\n[1309 rows x 6 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.000000</td>\n      <td>7.2500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.000000</td>\n      <td>71.2833</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>26.000000</td>\n      <td>7.9250</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>35.000000</td>\n      <td>53.1000</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>35.000000</td>\n      <td>8.0500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>29.881138</td>\n      <td>8.0500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>39.000000</td>\n      <td>108.9000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>38.500000</td>\n      <td>7.2500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>29.881138</td>\n      <td>8.0500</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>29.881138</td>\n      <td>22.3583</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1309 rows × 6 columns</p>\n</div>"},"metadata":{}}],"execution_count":135},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX = df.drop('Survived',axis=1)\ny = df['Survived']","metadata":{"id":"4AVPiEjKhG5r","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.794589Z","iopub.execute_input":"2025-09-04T18:04:21.794997Z","iopub.status.idle":"2025-09-04T18:04:21.810431Z","shell.execute_reply.started":"2025-09-04T18:04:21.794967Z","shell.execute_reply":"2025-09-04T18:04:21.809542Z"}},"outputs":[],"execution_count":136},{"cell_type":"code","source":"x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)","metadata":{"id":"WRrop85wiy6U","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.811457Z","iopub.execute_input":"2025-09-04T18:04:21.812046Z","iopub.status.idle":"2025-09-04T18:04:21.828811Z","shell.execute_reply.started":"2025-09-04T18:04:21.812013Z","shell.execute_reply":"2025-09-04T18:04:21.827997Z"}},"outputs":[],"execution_count":137},{"cell_type":"code","source":"df.to_csv(\"Titanic\",index=False)","metadata":{"id":"zkCWZCUWhLpn","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.829663Z","iopub.execute_input":"2025-09-04T18:04:21.829949Z","iopub.status.idle":"2025-09-04T18:04:21.853900Z","shell.execute_reply.started":"2025-09-04T18:04:21.829919Z","shell.execute_reply":"2025-09-04T18:04:21.853023Z"}},"outputs":[],"execution_count":138},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\nfrom scipy import stats\nimport seaborn as sns\nimport matplotlib.pyplot as plt","metadata":{"id":"xFLpwzLhhvkC","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.854828Z","iopub.execute_input":"2025-09-04T18:04:21.855120Z","iopub.status.idle":"2025-09-04T18:04:21.860980Z","shell.execute_reply.started":"2025-09-04T18:04:21.855094Z","shell.execute_reply":"2025-09-04T18:04:21.860219Z"}},"outputs":[],"execution_count":139},{"cell_type":"code","source":"lg = LogisticRegression()\ndt = DecisionTreeClassifier()\nknn = KNeighborsClassifier()","metadata":{"id":"zmvZzM8RioJ7","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.861926Z","iopub.execute_input":"2025-09-04T18:04:21.862224Z","iopub.status.idle":"2025-09-04T18:04:21.878323Z","shell.execute_reply.started":"2025-09-04T18:04:21.862196Z","shell.execute_reply":"2025-09-04T18:04:21.877112Z"}},"outputs":[],"execution_count":140},{"cell_type":"code","source":"lg.fit(x_train,y_train)\ndt.fit(x_train,y_train)\nknn.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"HIub6Hr1iqu7","outputId":"06b5fa09-c839-4fae-c9c0-5a4b309cd1ea","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:21.881546Z","iopub.execute_input":"2025-09-04T18:04:21.881830Z","iopub.status.idle":"2025-09-04T18:04:22.087250Z","shell.execute_reply.started":"2025-09-04T18:04:21.881807Z","shell.execute_reply":"2025-09-04T18:04:22.086305Z"}},"outputs":[{"execution_count":141,"output_type":"execute_result","data":{"text/plain":"KNeighborsClassifier()","text/html":"<style>#sk-container-id-11 {color: black;background-color: white;}#sk-container-id-11 pre{padding: 0;}#sk-container-id-11 div.sk-toggleable {background-color: white;}#sk-container-id-11 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-11 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-11 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-11 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-11 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-11 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-11 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-11 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-11 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-11 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-11 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-11 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-11 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-11 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-11 div.sk-item {position: relative;z-index: 1;}#sk-container-id-11 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-11 div.sk-item::before, #sk-container-id-11 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-11 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-11 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-11 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-11 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-11 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-11 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-11 div.sk-label-container {text-align: center;}#sk-container-id-11 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-11 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-11\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-29\" type=\"checkbox\" checked><label for=\"sk-estimator-id-29\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":141},{"cell_type":"code","source":"print(\"Accuracy of Logistic Regression\", accuracy_score(y_test,lg.predict(x_test)))\nprint(\"Accuracy of Decision Tree \", accuracy_score(y_test,dt.predict(x_test)))\nprint(\"Accuracy of Knn is \" , accuracy_score(y_test,knn.predict(x_test)))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8co6mjBwi2mh","outputId":"e70ae388-331a-4298-c641-bc1043c65675","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:22.087879Z","iopub.execute_input":"2025-09-04T18:04:22.088121Z","iopub.status.idle":"2025-09-04T18:04:22.127493Z","shell.execute_reply.started":"2025-09-04T18:04:22.088099Z","shell.execute_reply":"2025-09-04T18:04:22.126676Z"}},"outputs":[{"name":"stdout","text":"Accuracy of Logistic Regression 0.7633587786259542\nAccuracy of Decision Tree  0.7022900763358778\nAccuracy of Knn is  0.7099236641221374\n","output_type":"stream"}],"execution_count":142},{"cell_type":"code","source":"cm1 = confusion_matrix(y_test,lg.predict(x_test))\ncm2 = confusion_matrix(y_test,dt.predict(x_test))\ncm3 = confusion_matrix(y_test,knn.predict(x_test))","metadata":{"id":"xWZ7MiBXj0EJ","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:22.128296Z","iopub.execute_input":"2025-09-04T18:04:22.130237Z","iopub.status.idle":"2025-09-04T18:04:22.163794Z","shell.execute_reply.started":"2025-09-04T18:04:22.130208Z","shell.execute_reply":"2025-09-04T18:04:22.163055Z"}},"outputs":[],"execution_count":143},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm1, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Logistic Regression')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"kkmNtAkRjmU-","outputId":"183b7af5-e369-4a3e-a0d8-dcf3bf00e764","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:22.165189Z","iopub.execute_input":"2025-09-04T18:04:22.165889Z","iopub.status.idle":"2025-09-04T18:04:22.377144Z","shell.execute_reply.started":"2025-09-04T18:04:22.165862Z","shell.execute_reply":"2025-09-04T18:04:22.376260Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":144},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(cm2, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Decision Tree')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"v6IBpNy_kBUs","outputId":"dda3872d-4325-45c8-9080-b0e574649cba","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:22.378467Z","iopub.execute_input":"2025-09-04T18:04:22.378902Z","iopub.status.idle":"2025-09-04T18:04:22.562903Z","shell.execute_reply.started":"2025-09-04T18:04:22.378873Z","shell.execute_reply":"2025-09-04T18:04:22.562042Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":145},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(cm3, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix KNN')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"ASUXFRq2kOYH","outputId":"9c95caa1-911d-4c33-faef-aa49f7c950d4","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:22.564013Z","iopub.execute_input":"2025-09-04T18:04:22.564348Z","iopub.status.idle":"2025-09-04T18:04:22.776166Z","shell.execute_reply.started":"2025-09-04T18:04:22.564325Z","shell.execute_reply":"2025-09-04T18:04:22.775258Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAokAAAIjCAYAAABvUIGpAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAABH4klEQVR4nO3dd3gU5d7G8XuTkE0MJCFAmnRBiiIgIAapEkVUioCIooSiqIceikalqkSRXgRRmhywHkHAc0AEIaKhG0BApAqKCc2ACSSEZN4/uNiXZYLuwm42sN+P11yX+8zszG/Xw/v+uJ+ZZy2GYRgCAAAALuPj6QIAAABQ+NAkAgAAwIQmEQAAACY0iQAAADChSQQAAIAJTSIAAABMaBIBAABgQpMIAAAAE5pEAAAAmNAkAjeZvXv36sEHH1RISIgsFosWL17s0vMfOnRIFotFc+fOdel5b2RNmzZV06ZNPV0GALgUTSLgBvv379fzzz+vihUrKiAgQMHBwbrvvvs0adIknTt3zq3XjouL044dO/Tmm29q/vz5qlu3rluvV5C6du0qi8Wi4ODgfL/HvXv3ymKxyGKxaOzYsU6f/+jRoxoxYoRSUlJcUO21s1gs6t27t2l89OjRslgs6t69u/Ly8mwNu8Vi0X/+8x/T8SNGjJDFYtGJEydsY5e+w7vuukv5/Srr1a4NwPv4eboA4Gbz1Vdf6fHHH5fValWXLl1055136vz581q3bp0GDx6snTt3aubMmW659rlz55ScnKxXX33Vbf+Pvly5cjp37pyKFCnilvP/Ez8/P509e1ZLly5Vx44d7fYtWLBAAQEBysrKuqZzHz16VCNHjlT58uVVq1Yth9/39ddfX9P1nPHWW2/p1VdfVVxcnD744AP5+Nj/HX/UqFFq166dLBaLQ+fbsWOHvvjiC7Vv394d5QK4CZAkAi508OBBderUSeXKldOuXbs0adIkPffcc+rVq5c++ugj7dq1S3fccYfbrn/8+HFJUmhoqNuuYbFYFBAQIF9fX7dd4+9YrVY1b95cH330kWnfwoUL9cgjjxRYLWfPnpUk+fv7y9/f323Xeeedd5SQkKAuXbpo9uzZpgaxVq1a2r59uxYtWuTQ+QIDA3X77bdr1KhR+aaJACDRJAIuNWbMGGVkZGjWrFmKiooy7a9UqZL69etne33hwgW9/vrruu2222S1WlW+fHm98sorys7Otntf+fLl9eijj2rdunW65557FBAQoIoVK+rDDz+0HTNixAiVK1dOkjR48GBZLBaVL19e0sUpxkv/frlL05GXW7lypRo2bKjQ0FAVLVpUVapU0SuvvGLbf7V7ElevXq1GjRopKChIoaGhatOmjXbv3p3v9fbt26euXbsqNDRUISEh6tatm63hcsRTTz2l//3vf0pPT7eNbdq0SXv37tVTTz1lOv7UqVMaNGiQatSooaJFiyo4OFgtW7bUtm3bbMesWbNG9erVkyR169bNNo176XM2bdpUd955p7Zs2aLGjRvrlltusX0vV96TGBcXp4CAANPnb9GihYoXL66jR486/FnHjx+vIUOG6Omnn9acOXNMDaIkderUyammz8fHR6+99ppTjSUA70OTCLjQ0qVLVbFiRTVo0MCh45999lkNGzZMd999tyZMmKAmTZooMTFRnTp1Mh27b98+dejQQQ888IDGjRun4sWLq2vXrtq5c6ckqV27dpowYYIk6cknn9T8+fM1ceJEp+rfuXOnHn30UWVnZ2vUqFEaN26cWrdure+///5v3/fNN9+oRYsWOnbsmEaMGKH4+Hj98MMPuu+++3To0CHT8R07dtRff/2lxMREdezYUXPnztXIkSMdrvPStOoXX3xhG1u4cKGqVq2qu+++23T8gQMHtHjxYj366KMaP368Bg8erB07dqhJkya2hq1atWoaNWqUJKlnz56aP3++5s+fr8aNG9vOc/LkSbVs2VK1atXSxIkT1axZs3zrmzRpkkqVKqW4uDjl5uZKkt577z19/fXXmjJliqKjox36nJMmTdLAgQP11FNPae7cufk2iJLk6+ur1157Tdu2bXO46XvqqadUuXJl0kQAV2cAcInTp08bkow2bdo4dHxKSoohyXj22WftxgcNGmRIMlavXm0bK1eunCHJSEpKso0dO3bMsFqtxsCBA21jBw8eNCQZ77zzjt054+LijHLlyplqGD58uHH5/xmYMGGCIck4fvz4Veu+dI05c+bYxmrVqmWEh4cbJ0+etI1t27bN8PHxMbp06WK6Xvfu3e3O+dhjjxklSpS46jUv/xxBQUGGYRhGhw4djObNmxuGYRi5ublGZGSkMXLkyHy/g6ysLCM3N9f0OaxWqzFq1Cjb2KZNm0yf7ZImTZoYkowZM2bku69JkyZ2YytWrDAkGW+88YZx4MABo2jRokbbtm3/8TMahmFIsv03f/LJJ40LFy7ke9zln/XChQtG5cqVjZo1axp5eXmGYfz/9335f8/Lv8N58+YZkowvvvjC7tq9evVyqE4ANzeSRMBFzpw5I0kqVqyYQ8f/97//lSTFx8fbjQ8cOFDSxQdgLle9enU1atTI9rpUqVKqUqWKDhw4cM01X+nSvYxffvml8vLyHHrPH3/8oZSUFHXt2lVhYWG28bvuuksPPPCA7XNe7oUXXrB73ahRI508edL2HTriqaee0po1a5SamqrVq1crNTU136lm6eJ9jJdSuNzcXJ08edI2lb5161aHr2m1WtWtWzeHjn3wwQf1/PPP2x4oCQgI0HvvvefwtdLS0iRJFSpUcOj+z8vTREeXPercuTNpIoCrokkEXCQ4OFiS9Ndffzl0/K+//iofHx9VqlTJbjwyMlKhoaH69ddf7cbLli1rOkfx4sX1559/XmPFZk888YTuu+8+Pfvss4qIiFCnTp306aef/m3DeKnOKlWqmPZVq1ZNJ06cUGZmpt34lZ+lePHikuTUZ3n44YdVrFgxffLJJ1qwYIHq1atn+i4vycvL04QJE1S5cmVZrVaVLFlSpUqV0vbt23X69GmHr3nrrbc69YDK2LFjFRYWppSUFE2ePFnh4eEOvzcuLk6tWrXS6NGjbbcR/JPOnTurUqVKDjd9lxrLlJQUl6+nCeDGR5MIuEhwcLCio6P1008/OfU+R5csuVqa5EgzcLVrXLpf7pLAwEAlJSXpm2++0TPPPKPt27friSee0AMPPGA69npcz2e5xGq1ql27dpo3b54WLVp01RRRuri+YHx8vBo3bqx///vfWrFihVauXKk77rjD4cRUuvj9OOPHH3/UsWPHJF1ccsYZfn5++vTTT9WkSRMNHDhQc+bM+cf3XN70ffnllw5dx9nGEoD3oEkEXOjRRx/V/v37lZyc/I/HlitXTnl5edq7d6/deFpamtLT021PKrtC8eLF7Z4EvuTKtFK6+ORr8+bNNX78eO3atUtvvvmmVq9erW+//Tbfc1+qc8+ePaZ9P//8s0qWLKmgoKDr+wBX8dRTT+nHH3/UX3/9le/DPpd8/vnnatasmWbNmqVOnTrpwQcfVGxsrOk7cbRhd0RmZqa6deum6tWrq2fPnhozZow2bdrk1DkCAgK0ZMkS1a5dW88995xDD6U8/fTTqlSpkkaOHOl0muhoYwnAO9AkAi40ZMgQBQUF6dlnn7XdU3a5/fv3a9KkSZIuTpdKMj2BPH78eEly6Xp/t912m06fPq3t27fbxv744w9T03Hq1CnTey8tKn3lsjyXREVFqVatWpo3b55d0/XTTz/p66+/tn1Od2jWrJlef/11TZ06VZGRkVc9ztfX19QwffbZZ/r999/txi41s/k11M566aWXdPjwYc2bN0/jx49X+fLlFRcXd9Xv8WqCg4O1fPlyVapUSU8++aRWrVr1t8df3vQtWbLEoWtc3lgCwCX84grgQrfddpsWLlyoJ554QtWqVbP7xZUffvhBn332mbp27SpJqlmzpuLi4jRz5kylp6erSZMm2rhxo+bNm6e2bdtedXmVa9GpUye99NJLeuyxx9S3b1+dPXtW06dP1+2332734MaoUaOUlJSkRx55ROXKldOxY8f07rvvqnTp0mrYsOFVz//OO++oZcuWiomJUY8ePXTu3DlNmTJFISEhGjFihMs+x5Uurff3Tx599FGNGjVK3bp1U4MGDbRjxw4tWLBAFStWtDvutttuU2hoqGbMmKFixYopKChI9evXV4UKFZyqa/Xq1Xr33Xc1fPhw25I8c+bMUdOmTTV06FCNGTPGqfOVKlVKK1eu1H333ae2bdtq1apVuueee656fOfOnfX66687/POCvr6+evXVVx1+KAeAdyBJBFysdevW2r59uzp06KAvv/xSvXr10ssvv6xDhw5p3Lhxmjx5su3YDz74QCNHjtSmTZvUv39/rV69WgkJCfr4449dWlOJEiW0aNEi3XLLLRoyZIjmzZunxMREtWrVylR72bJlNXv2bPXq1UvTpk1T48aNtXr1aoWEhFz1/LGxsVq+fLlKlCihYcOGaezYsbr33nv1/fffO91gucMrr7yigQMHasWKFerXr5+2bt2qr776SmXKlLE7rkiRIpo3b558fX31wgsv6Mknn9TatWudutZff/2l7t27q3bt2nr11Vdt440aNVK/fv00btw4rV+/3unPUKZMGX399dcKCAhQy5Ytbetj5sfPz8+h5vlyTz/9tG677Tan6wJw87IY3KkMAACAK5AkAgAAwIQmEQAAACY0iQAAADChSQQAAIAJTSIAAABMaBIBAABgQpMIAAAAk5vyF1cCa/f2dAkA3OT4+ime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OTlq0aKFYmJi9N1338nPz09vvPGGHnroIW3fvl3+/v4aN26c5s6dq9mzZ6tatWoaN26cFi1apPvvv/+q1+3SpYuSk5M1efJk1axZUwcPHtSJEydUpkwZ/ec//1H79u21Z88eBQcHKzAwUJKUmJiof//735oxY4YqV66spKQkPf300ypVqpSaNGmiI0eOqF27durVq5d69uypzZs3a+DAgdf1/eTl5al06dL67LPPVKJECf3www/q2bOnoqKi1LFjR7vvLSAgQGvWrNGhQ4fUrVs3lShRQm+++aZDtQNAoWYAuKnFxcUZbdq0MQzDMPLy8oyVK1caVqvVGDRokG1/RESEkZ2dbXvP/PnzjSpVqhh5eXm2sezsbCMwMNBYsWKFYRiGERUVZYwZM8a2PycnxyhdurTtWoZhGE2aNDH69etnGIZh7Nmzx5BkrFy5Mt86v/32W0OS8eeff9rGsrKyjFtuucX44Ycf7I7t0aOH8eSTTxqGYRgJCQlG9erV7fa/9NJLpnNdqVy5csaECROuuv9KvXr1Mtq3b297HRcXZ4SFhRmZmZm2senTpxtFixY1cnNzHao9v88MAIUFSSLgBZYtW6aiRYsqJydHeXl5euqppzRixAjb/ho1atjdh7ht2zbt27dPxYoVsztPVlaW9u/fr9OnT+uPP/5Q/fr1bfv8/PxUt25d05TzJSkpKfL19XUqQdu3b5/Onj2rBx54wG78/Pnzql27tiRp9+7ddnVIUkxMjMPXuJpp06Zp9uzZOnz4sM6dO6fz58+rVq1adsfUrFlTt9xyi911MzIydOTIEWVkZPxj7QBQmNEkAl6gWbNmmj59uvz9/RUdHS0/P/s/+kFBQXavMzIyVKdOHS1YsMB0rlKlSl1TDZemj52RkZEhSfrqq69066232u2zWq3XVIcjPv74Yw0aNEjjxo1TTEyMihUrpnfeeUcbNmxw+Byeqh0AXIUmEfACQUFBqlSpksPH33333frkk08UHh6u4ODgfI+JiorShg0b1LhxY0nShQsXtGXLFt199935Hl+jRg3l5eVp7dq1io2NNe2/lGTm5ubaxqpXry6r1arDhw9fNYGsVq2a7SGcS9avX//PH/JvfP/992rQoIH+9a9/2cb2799vOm7btm06d+6crQFev369ihYtqjJlyigsLOwfaweAwoynmwGYdO7cWSVLllSbNm303Xff6eDBg1qzZo369u2r3377TZLUr18/vfXWW1q8eLF+/vln/etf//rbNQ7Lly+vuLg4de/eXYsXL7ad89NPP5UklStXThaLRcuWLdPx48eVkZGhYsWKadCgQRowYIDmzZun/fv3a+vWrZoyZYrmzZsnSXrhhRe0d+9eDR48WHv27NHChQs1d+5chz7n77//rpSUFLvtzz//VOXKlbV582atWLFCv/zyi4YOHapNmzaZ3n/+/Hn16NFDu3bt0n//+18NHz5cvXv3lo+Pj0O1A0Ch5umbIgG41+UPrjiz/48//jC6dOlilCxZ0rBarUbFihWN5557zjh9+rRhGBcfVOnXr58RHBxshIaGGvHx8UaXLl2u+uCKYRjGuXPnjAEDBhhRUVGGv7+/UalSJWP27Nm2/aNGjTIiIyMNi8VixMXFGYZx8WGbiRMnGlWqVDGKFClilCpVymjRooWxdu1a2/uWLl1qVKpUybBarUajRo2M2bNnO/TgiiTTNn/+fCMrK8vo2rWrERISYoSGhhovvvii8fLLLxs1a9Y0fW/Dhg0zSpQoYRQtWtR47rnnjKysLNsx/1Q7D64AKMwshnGVu8wBAADgtZhuBgAAgAlNIgAAAExoEgEAAGBCkwgAAAATmkQAAACY0CQCAADAhCYRAAAAJjSJAAAAMKFJBAAAgAlNIgAAAExoEgEAAGDyf5jGQODusIlyAAAAAElFTkSuQmCC\n"},"metadata":{}}],"execution_count":146},{"cell_type":"markdown","source":"Lets find best parameters for this on all","metadata":{"id":"-aVdPajujO_h"}},{"cell_type":"code","source":"param_dist = {\n    'penalty': ['l1', 'l2', 'elasticnet'],\n    'C': stats.loguniform(1e-3, 1e2),\n    'solver': ['liblinear', 'saga'],   # removed 'newton-cg' (not compatible with l1/elasticnet)\n    'max_iter': [100, 200, 500],       # cleaner values, avoid very small like 10 or 50\n    'class_weight': ['balanced', None],\n    'l1_ratio': [0.1, 0.5, 0.9]        # only works when penalty='elasticnet' and solver='saga'\n}\n\nreg = RandomizedSearchCV(\n    LogisticRegression(),\n    param_distributions=param_dist,\n    n_iter=30,   # number of random samples\n    cv=5,\n    n_jobs=-1,\n    verbose=1,\n    random_state=42,\n    scoring='accuracy'\n)\n\n","metadata":{"id":"pfJvO67ei6_H","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:22.777075Z","iopub.execute_input":"2025-09-04T18:04:22.777342Z","iopub.status.idle":"2025-09-04T18:04:22.784267Z","shell.execute_reply.started":"2025-09-04T18:04:22.777322Z","shell.execute_reply":"2025-09-04T18:04:22.783216Z"}},"outputs":[],"execution_count":147},{"cell_type":"code","source":"reg.fit(x_train, y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":745},"id":"-9MuikrKk1S4","outputId":"0f60d318-b984-43fb-cd43-22be6be88579","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T18:04:22.785244Z","iopub.execute_input":"2025-09-04T18:04:22.785666Z","iopub.status.idle":"2025-09-04T18:04:24.249711Z","shell.execute_reply.started":"2025-09-04T18:04:22.785635Z","shell.execute_reply":"2025-09-04T18:04:24.248883Z"}},"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 30 candidates, totalling 150 fits\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n20 fits failed out of a total of 150.\nThe score on these train-test partitions for these parameters will be set to nan.\nIf these failures are not expected, you can try to debug them by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n20 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 1162, in fit\n    solver = _check_solver(self.solver, self.penalty, self.dual)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py\", line 64, in _check_solver\n    raise ValueError(\nValueError: Only 'saga' solver supports elasticnet penalty, got solver=liblinear.\n\n  warnings.warn(some_fits_failed_message, FitFailedWarning)\n/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [0.72970608 0.6991342  0.7383003  0.78415129 0.7516792  0.78127592\n        nan 0.7134746  0.73925723 0.73829574 0.7383003  0.7383003\n 0.78319435 0.73830485        nan 0.73065391 0.6991342  0.70298473\n 0.72779221 0.78032809 0.6991342         nan 0.72397813        nan\n 0.74021417 0.78128503 0.70200957 0.72873548 0.72110276 0.72493051]\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:1165: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l1)\n  warnings.warn(\n","output_type":"stream"},{"execution_count":148,"output_type":"execute_result","data":{"text/plain":"RandomizedSearchCV(cv=5, estimator=LogisticRegression(), n_iter=30, n_jobs=-1,\n                   param_distributions={'C': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x7820964b7010>,\n                                        'class_weight': ['balanced', None],\n                                        'l1_ratio': [0.1, 0.5, 0.9],\n                                        'max_iter': [100, 200, 500],\n                                        'penalty': ['l1', 'l2', 'elasticnet'],\n                                        'solver': ['liblinear', 'saga']},\n                   random_state=42, scoring='accuracy', verbose=1)","text/html":"<style>#sk-container-id-12 {color: black;background-color: white;}#sk-container-id-12 pre{padding: 0;}#sk-container-id-12 div.sk-toggleable {background-color: white;}#sk-container-id-12 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-12 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-12 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-12 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-12 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-12 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-12 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-12 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-12 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-12 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-12 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-12 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-12 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-12 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-12 div.sk-item {position: relative;z-index: 1;}#sk-container-id-12 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-12 div.sk-item::before, #sk-container-id-12 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-12 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-12 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-12 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-12 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-12 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-12 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-12 div.sk-label-container {text-align: center;}#sk-container-id-12 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-12 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-12\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, estimator=LogisticRegression(), n_iter=30, n_jobs=-1,\n                   param_distributions={&#x27;C&#x27;: &lt;scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x7820964b7010&gt;,\n                                        &#x27;class_weight&#x27;: [&#x27;balanced&#x27;, None],\n                                        &#x27;l1_ratio&#x27;: [0.1, 0.5, 0.9],\n                                        &#x27;max_iter&#x27;: [100, 200, 500],\n                                        &#x27;penalty&#x27;: [&#x27;l1&#x27;, &#x27;l2&#x27;, &#x27;elasticnet&#x27;],\n                                        &#x27;solver&#x27;: [&#x27;liblinear&#x27;, &#x27;saga&#x27;]},\n                   random_state=42, scoring=&#x27;accuracy&#x27;, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-30\" type=\"checkbox\" ><label for=\"sk-estimator-id-30\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5, estimator=LogisticRegression(), n_iter=30, n_jobs=-1,\n                   param_distributions={&#x27;C&#x27;: &lt;scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x7820964b7010&gt;,\n                                        &#x27;class_weight&#x27;: [&#x27;balanced&#x27;, None],\n                                        &#x27;l1_ratio&#x27;: [0.1, 0.5, 0.9],\n                                        &#x27;max_iter&#x27;: [100, 200, 500],\n                                        &#x27;penalty&#x27;: [&#x27;l1&#x27;, &#x27;l2&#x27;, &#x27;elasticnet&#x27;],\n                                        &#x27;solver&#x27;: [&#x27;liblinear&#x27;, &#x27;saga&#x27;]},\n                   random_state=42, scoring=&#x27;accuracy&#x27;, verbose=1)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-31\" type=\"checkbox\" ><label for=\"sk-estimator-id-31\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-32\" type=\"checkbox\" ><label for=\"sk-estimator-id-32\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":148},{"cell_type":"code","source":"reg.best_score_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QpuFi2YrkagY","outputId":"319e4e7a-2bbe-4290-e35b-d014df0ad4b3","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"reg.best_params_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EnsC458Qkf0A","outputId":"d8cee173-0e65-44e4-921e-e8ac88d4e3d6","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"param_grid2 = {\n    'criterion': ['gini', 'entropy'],\n    'splitter': ['best', 'random'],\n    'max_depth': [2, 4, 8, 10, 13],\n    'max_features': ['sqrt', 'log2', None],\n    'min_samples_leaf': [2, 4, 5],   # added smaller option for flexibility\n    'min_samples_split': [2, 5, 10], # new param, controls internal node splits\n    'class_weight': [None, 'balanced']\n}\nrcv = RandomizedSearchCV(\n    DecisionTreeClassifier(),\n    param_distributions=param_grid2,\n    n_iter=10,\n    cv=5,\n    random_state=4,\n    n_jobs=-1,      # parallel processing\n    verbose=1       # optional, shows progress\n)","metadata":{"id":"Amu2nZE8lmpb","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rcv.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":182},"id":"uwtM_5OLmCkH","outputId":"884d6c04-1894-4caa-e9b4-2fe46f7aa62d","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rcv.best_score_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C5BUH4gHmEOp","outputId":"8b1a58a6-5e90-43af-c933-4786288fc538","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rcv.best_params_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AFOkjadanLr7","outputId":"42a0992e-b78d-426a-9f69-a7462ff44467","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"param_dist3 = {\n    'n_neighbors': np.arange(1, 17),       # try neighbors from 1 to 30\n    'weights': ['uniform', 'distance'],    # equal or weighted by distance\n    'metric': ['euclidean', 'manhattan', 'minkowski'],\n    'p': [1, 2,3]                            # 1=manhattan, 2=euclidean\n}\n\n# RandomizedSearchCV setup\nrcv2 = RandomizedSearchCV(\n    KNeighborsClassifier(),\n    param_distributions=param_dist3,\n    n_iter=20,          # number of random samples to test\n    cv=5,               # 5-fold cross validation\n    random_state=42,\n    n_jobs=-1,\n    verbose=1,\n    scoring='accuracy'  # or 'f1' if imbalanced\n)\n","metadata":{"id":"BZZhesapnND6","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rcv2.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":182},"id":"PB2RJxs1nku2","outputId":"add7ba7a-d84c-4dcd-f763-47a4f63408a7","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rcv2.best_score_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UXpOCmoTnmtI","outputId":"38777e38-a0fa-441d-9400-eb2277288f9f","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rcv2.best_params_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FerysV7MnpBI","outputId":"94673592-eb33-4119-90c2-813f0911206c","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<h1> Now we have got best parameters for all . Need is now to use voting and Bagging classifier to get best results </h1>","metadata":{"id":"KjBBpT3WntpU"}},{"cell_type":"code","source":"lrr = LogisticRegression(C=4.073745196058386,\n    class_weight=None,\n    max_iter=200,\n    penalty='l1',\n    solver='liblinear')\n\ndtt = DecisionTreeClassifier(splitter='random',\n    min_samples_split=2,\n    min_samples_leaf=2,\n    max_features=None,\n    max_depth=4,\n    criterion='entropy',\n    class_weight=None,\n    random_state=42)\n\nknnn = KNeighborsClassifier(\n    weights='uniform',\n    p=2,\n    n_neighbors=5,\n    metric='manhattan'\n)","metadata":{"id":"cXGkzwiAnq-B","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"estimators = [('lr',lrr),('dt',dtt),('knn',knnn)]","metadata":{"id":"koATtBFiouk3","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.ensemble import VotingClassifier\nfrom sklearn.model_selection import cross_val_score","metadata":{"id":"svd6FkHTo3ES","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"vr = VotingClassifier(estimators)\nscores = cross_val_score(vr,X,y,scoring='accuracy',cv=10)\nprint(\"Voting Regressor\",np.round(np.mean(scores),2))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"owYYhRB5ozxt","outputId":"8934c63c-c538-4731-88e5-c055545284a7","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"vr.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":134},"id":"bwgDA9-3pZnW","outputId":"1d38f29f-841b-46b9-c237-df4b338d4664","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rmm = confusion_matrix(y_test,vr.predict(x_test))","metadata":{"id":"BukOh_VUpMyv","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"accuracy_score(y_test,vr.predict(x_test)) #highest so far","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vVyz76t0pn5-","outputId":"45b2d135-3a82-40f0-9193-b95c6a997687","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(rmm, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Voting Classifier')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"JDl1aK0bpYAJ","outputId":"27d922d0-2f18-45cb-87b3-8af4cb9dc9c6","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<h1> Lets try Bagging </h1>","metadata":{"id":"g4tXdaYYqCH5"}},{"cell_type":"markdown","source":"","metadata":{"id":"1-vtMALvqCDd"}},{"cell_type":"code","source":"x_train.shape","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DDZe73DWqgdx","outputId":"b2abf64b-4d51-4dc7-f91d-823c4f0c9b96","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"bag = BaggingClassifier(\n  estimator=DecisionTreeClassifier(),\n    n_estimators=700,\n    max_samples=0.25, #row sampling\n    bootstrap=True, #pasting vs bagging\n    #max_features=0.5, #column sampling\n    bootstrap_features=False,\n    random_state=42,\n    n_jobs=-1\n)","metadata":{"id":"ledEhL5BpkbE","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"bag.fit(x_train,y_train)\ny_pred = bag.predict(x_test)\nprint(\"Accuracy of Bagging\",accuracy_score(y_test,y_pred)) #highest so far","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vUfYsTaZqXf4","outputId":"05575d03-f37b-4e56-85d7-80f4c15277f4","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"x_train.shape","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z42JyaHn1OAE","outputId":"647d96df-3492-45e7-b3c8-6d0943762947","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"bag.estimators_samples_[0].shape #rows","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vsVcuzMDr5X8","outputId":"9948db72-ad1f-4c93-943e-bee8b5b46b0a","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cf = confusion_matrix(y_test,bag.predict(x_test))","metadata":{"id":"UhZaxgjmsL94","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(cf, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Voting Classifier')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"8qqnPxqtqy2R","outputId":"746bee97-3dde-4290-e72a-4fe62b3cf113","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"bag2 = BaggingClassifier(\n  estimator=LogisticRegression(),\n    n_estimators=40,\n    max_samples=0.5, #row sampling\n    bootstrap=False, #pasting vs bagging\n    #max_features=0.5, #column sampling\n    bootstrap_features=False,\n    random_state=42,\n    n_jobs=-1\n)","metadata":{"id":"krbIDgJgseqO","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"bag2.fit(x_train,y_train)\ny_pred = bag2.predict(x_test)\nprint(\"Accuracy of Bagging\",accuracy_score(y_test,y_pred)) #best of this is 0.81 with parameter tunning","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G3i5fir9snkA","outputId":"1d22a607-c2b5-4efc-9d63-ccfd7f8c6076","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cf2 = confusion_matrix(y_test,bag2.predict(x_test))","metadata":{"id":"ZmsMEsLwsv6h","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(cf2, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Bagging LGR')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"XtSviTU3tXZN","outputId":"fec590e8-7046-4fde-ef5c-d977aa6b90f9","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(cf, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Bagging DT')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"LQqaGoTYth9l","outputId":"19bc10f8-6573-4a3b-e0c0-2358aa1e727c","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"bag3 = BaggingClassifier(\n  estimator=KNeighborsClassifier(),\n    n_estimators=400,\n    max_samples=0.3, #row sampling\n    bootstrap=False, #pasting vs bagging\n    #max_features=0.5, #column sampling\n    random_state=42,\n    n_jobs=-1\n)","metadata":{"id":"e41pZbK2tlWe","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"bag3.fit(x_train,y_train)\ny_pred = bag3.predict(x_test)\nprint(\"Accuracy of Bagging\",accuracy_score(y_test,y_pred))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"opXcogyLtset","outputId":"b5e7f089-f5fa-4ae9-c283-b01889fe68ef","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cf3 = confusion_matrix(y_test,bag3.predict(x_test))","metadata":{"id":"oYlS2zEDtzs_","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nsns.heatmap(cf3, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix Bagging KNN')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"MR9BwNcvuR7w","outputId":"1ef3b11b-0f53-42d3-b04a-2195096c89e1","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<h1> Best Score so far </h1>","metadata":{"id":"wxeHYkZfu-UB"}},{"cell_type":"code","source":"accuracy_score(y_test,bag.predict(x_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fMlHuJTdu-CW","outputId":"16245a75-f320-4156-bf5e-0e2f3023fe02","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tit = pd.read_csv('/kaggle/input/titanic-5-features-cleanedds/Titanic.csv')","metadata":{"id":"DHNJ34hoVTB7","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tit.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"SjWtL4bfVYwk","outputId":"de65695e-4b05-4eac-fca5-fb280561f9ae","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"x = tit.drop('Survived',axis=1)\ny = tit['Survived']","metadata":{"id":"3ci0vNJuVbwK","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)","metadata":{"id":"lH_7TeECVeBK","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier","metadata":{"id":"PSPO2zvqVfzy","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rf = RandomForestClassifier()\nrf.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"33aYoES8VkQN","outputId":"4606436f-f725-4742-fced-09a88129f9af","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"accuracy_score(y_test,rf.predict(x_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0x3d4_X2VqKa","outputId":"e444f2da-53e8-485b-eca7-f87f33eadd32","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"confusion_matrix(y_test,rf.predict(x_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ciRFUduVVs8Z","outputId":"be7268b9-bf7c-43c8-f326-a040d6a78740","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<h2> Lets do hyperparameter tunning </h2>","metadata":{"id":"BPiaCE0FVvsF"}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV","metadata":{"id":"uNqCGTVWWIgQ","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"param_grid = {\n    'n_estimators': [100, 200, 300],            # Number of trees\n    'max_depth': [None, 10, 20, 30],            # Maximum depth of each tree\n    'max_features': ['sqrt', 'log2', None],     # Number of features to consider at each split\n    'min_samples_split': [2,3,4,5,6,7,8,9],            # Minimum samples required to split a node\n    'min_samples_leaf': [1, 2, 4],              # Minimum samples required at each leaf node\n    'bootstrap': [True, False],\n    'criterion': ['gini', 'entropy']\n    }             # Whether bootstrap samples are used","metadata":{"id":"NdJv3BQeV0eq","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rf = RandomForestClassifier(random_state=42)\nrandom_search = RandomizedSearchCV(\n    estimator=rf,\n    param_distributions=param_grid,\n    n_iter=50,                  # Number of random combinations to try\n    cv=5,                       # 5-fold cross-validation\n    scoring='accuracy',        # You can change this to 'f1', 'roc_auc', etc.\n    random_state=42,\n    n_jobs=-1                   # Use all available cores\n)\n","metadata":{"id":"IcC49gDBWCP4","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"random_search.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":164},"id":"erNwobBj1GWq","outputId":"326989d5-77f5-4f8a-ce19-bf02e92956c4","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"random_search.best_score_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XHSmuS_T1og1","outputId":"5a22532a-215c-4753-dfb3-83a8fbdfbf81","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"random_search.best_params_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pxn5fTTj1syR","outputId":"0e98ada9-9f33-41d0-9f37-6d5de0fcccdf","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"accuracy_score(y_test,random_search.predict(x_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RWrGl8yR0pKX","outputId":"5fd64ef6-1f2c-443d-e643-63604425ea97","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ab = AdaBoostClassifier()\nab.fit(x_train,y_train)","metadata":{"id":"vgStzDhDXVng","colab":{"base_uri":"https://localhost:8080/","height":80},"outputId":"fb1daf13-308d-4e99-9bc9-37981ae7ebed","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"accuracy_score(y_test,ab.predict(x_test))","metadata":{"id":"2FMva8NdXYLm","colab":{"base_uri":"https://localhost:8080/"},"outputId":"218b53b3-384b-4e16-802c-2c3259bb2208","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"confusion_matrix(y_test,ab.predict(x_test))","metadata":{"id":"1i4banbDXX_o","colab":{"base_uri":"https://localhost:8080/"},"outputId":"080d59b7-f154-449f-8807-7b5e2739e8fb","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import random\nfrom scipy.stats import randint, uniform","metadata":{"id":"2-bwGCFrXsMU","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"param_dist = {\n    'n_estimators': randint(50, 200),           # Number of boosting rounds\n    'learning_rate': uniform(0.01, 1.0),        # Contribution of each weak learner\n    'algorithm': ['SAMME', 'SAMME.R']           # Boosting algorithm\n}\n\n# Set up RandomizedSearchCV\nrandom_search = RandomizedSearchCV(\n    estimator=ab,\n    param_distributions=param_dist,\n    n_iter=50,                  # Number of random combinations to try\n    cv=5,                       # 5-fold cross-validation\n    scoring='accuracy',        # You can change this to 'f1', 'roc_auc', etc.\n    random_state=42,\n    n_jobs=-1                   # Use all available cores\n)","metadata":{"id":"XCgJGLHVXoZa","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"random_search.fit(x_train,y_train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":763},"id":"l_uX-3tn1-WT","outputId":"67cfcc92-efaa-4fc6-9e8c-dd9b4a9cc0cd","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"random_search.best_score_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZyxvR9mW2Jqd","outputId":"c764d8eb-c72b-40a3-fba5-73a7b9e53794","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"random_search.best_params_","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8Lg8sHrF2L6P","outputId":"3668ac7f-0f6b-459e-ba22-c47345b2a5d1","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"accuracy_score(y_test,random_search.predict(x_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FWtjTtSF2OVs","outputId":"421392fa-0fb2-4ed1-88b3-dab9cb4b5393","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"confusion_matrix(y_test,random_search.predict(x_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9cBXZC8T2QsP","outputId":"ee5ec1a4-69ee-45c6-add6-2c4f14a2835b","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import joblib\n\n# Save\njoblib.dump(bag, \"bagging_model.pkl\")\n\n# Load\nmodel = joblib.load(\"bagging_model.pkl\")","metadata":{"id":"WYJhBjip8kDY","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dft = pd.read_csv('/content/test.csv')","metadata":{"id":"iFPmCCBYGRLN","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dft.drop(['PassengerId','Name','SibSp','Parch','Ticket','Cabin'],axis=1,inplace=True)","metadata":{"id":"WpL5eWFuGVip","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dft","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"IFUhwQztHKq0","outputId":"0a93c4a7-47e7-473d-defd-3b53caf51415","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dft['Embarked'].fillna('S',inplace=True)\ndft['Age'].fillna(dft['Age'].mean(),inplace=True)\ndft['Fare'].fillna(dft['Fare'].mean(),inplace=True)\nle = LabelEncoder()\ndft['Sex'] = le.fit_transform(dft['Sex'])\ndft['Embarked'] = le.fit_transform(dft['Embarked'])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HBD0auEaGYEM","outputId":"adaf1552-d8d6-4724-a037-ad8768a6954c","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predictions = bag.predict(dft)","metadata":{"id":"r3zwi1k2GKEo","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test = pd.read_csv('/content/test.csv')","metadata":{"id":"8Ahmiyw4Hwj8","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"output = pd.DataFrame({\n    \"PassengerId\": test[\"PassengerId\"],\n    \"Survived\": predictions\n})\noutput.to_csv(\"submission.csv\", index=False)","metadata":{"id":"arKqsvB24eHH","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"id":"m6GSsHdvHyEB","trusted":true},"outputs":[],"execution_count":null}]}